// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM_login.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_IM_5flogin_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_IM_5flogin_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_IM_5flogin_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_IM_5flogin_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[22]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_IM_5flogin_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_IM_5flogin_2eproto_metadata_getter(int index);
class AddRequest;
struct AddRequestDefaultTypeInternal;
extern AddRequestDefaultTypeInternal _AddRequest_default_instance_;
class DeleteFriendRequest;
struct DeleteFriendRequestDefaultTypeInternal;
extern DeleteFriendRequestDefaultTypeInternal _DeleteFriendRequest_default_instance_;
class FriendRequest;
struct FriendRequestDefaultTypeInternal;
extern FriendRequestDefaultTypeInternal _FriendRequest_default_instance_;
class FriendRespond;
struct FriendRespondDefaultTypeInternal;
extern FriendRespondDefaultTypeInternal _FriendRespond_default_instance_;
class ImageMessage;
struct ImageMessageDefaultTypeInternal;
extern ImageMessageDefaultTypeInternal _ImageMessage_default_instance_;
class ImageRequest;
struct ImageRequestDefaultTypeInternal;
extern ImageRequestDefaultTypeInternal _ImageRequest_default_instance_;
class ImageRespond;
struct ImageRespondDefaultTypeInternal;
extern ImageRespondDefaultTypeInternal _ImageRespond_default_instance_;
class LoginRequest;
struct LoginRequestDefaultTypeInternal;
extern LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;
class MessageRequest;
struct MessageRequestDefaultTypeInternal;
extern MessageRequestDefaultTypeInternal _MessageRequest_default_instance_;
class ModifyInfoRequest;
struct ModifyInfoRequestDefaultTypeInternal;
extern ModifyInfoRequestDefaultTypeInternal _ModifyInfoRequest_default_instance_;
class PullRequest;
struct PullRequestDefaultTypeInternal;
extern PullRequestDefaultTypeInternal _PullRequest_default_instance_;
class PullRespond;
struct PullRespondDefaultTypeInternal;
extern PullRespondDefaultTypeInternal _PullRespond_default_instance_;
class RegisterRequest;
struct RegisterRequestDefaultTypeInternal;
extern RegisterRequestDefaultTypeInternal _RegisterRequest_default_instance_;
class SearchRequest;
struct SearchRequestDefaultTypeInternal;
extern SearchRequestDefaultTypeInternal _SearchRequest_default_instance_;
class SearchRespond;
struct SearchRespondDefaultTypeInternal;
extern SearchRespondDefaultTypeInternal _SearchRespond_default_instance_;
class ServerPush;
struct ServerPushDefaultTypeInternal;
extern ServerPushDefaultTypeInternal _ServerPush_default_instance_;
class SimpleRespond;
struct SimpleRespondDefaultTypeInternal;
extern SimpleRespondDefaultTypeInternal _SimpleRespond_default_instance_;
class TextMessage;
struct TextMessageDefaultTypeInternal;
extern TextMessageDefaultTypeInternal _TextMessage_default_instance_;
class UpdataImageRequest;
struct UpdataImageRequestDefaultTypeInternal;
extern UpdataImageRequestDefaultTypeInternal _UpdataImageRequest_default_instance_;
class UserInfoRequest;
struct UserInfoRequestDefaultTypeInternal;
extern UserInfoRequestDefaultTypeInternal _UserInfoRequest_default_instance_;
class UserInfoRespond;
struct UserInfoRespondDefaultTypeInternal;
extern UserInfoRespondDefaultTypeInternal _UserInfoRespond_default_instance_;
class VerifyRequest;
struct VerifyRequestDefaultTypeInternal;
extern VerifyRequestDefaultTypeInternal _VerifyRequest_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AddRequest* Arena::CreateMaybeMessage<::AddRequest>(Arena*);
template<> ::DeleteFriendRequest* Arena::CreateMaybeMessage<::DeleteFriendRequest>(Arena*);
template<> ::FriendRequest* Arena::CreateMaybeMessage<::FriendRequest>(Arena*);
template<> ::FriendRespond* Arena::CreateMaybeMessage<::FriendRespond>(Arena*);
template<> ::ImageMessage* Arena::CreateMaybeMessage<::ImageMessage>(Arena*);
template<> ::ImageRequest* Arena::CreateMaybeMessage<::ImageRequest>(Arena*);
template<> ::ImageRespond* Arena::CreateMaybeMessage<::ImageRespond>(Arena*);
template<> ::LoginRequest* Arena::CreateMaybeMessage<::LoginRequest>(Arena*);
template<> ::MessageRequest* Arena::CreateMaybeMessage<::MessageRequest>(Arena*);
template<> ::ModifyInfoRequest* Arena::CreateMaybeMessage<::ModifyInfoRequest>(Arena*);
template<> ::PullRequest* Arena::CreateMaybeMessage<::PullRequest>(Arena*);
template<> ::PullRespond* Arena::CreateMaybeMessage<::PullRespond>(Arena*);
template<> ::RegisterRequest* Arena::CreateMaybeMessage<::RegisterRequest>(Arena*);
template<> ::SearchRequest* Arena::CreateMaybeMessage<::SearchRequest>(Arena*);
template<> ::SearchRespond* Arena::CreateMaybeMessage<::SearchRespond>(Arena*);
template<> ::ServerPush* Arena::CreateMaybeMessage<::ServerPush>(Arena*);
template<> ::SimpleRespond* Arena::CreateMaybeMessage<::SimpleRespond>(Arena*);
template<> ::TextMessage* Arena::CreateMaybeMessage<::TextMessage>(Arena*);
template<> ::UpdataImageRequest* Arena::CreateMaybeMessage<::UpdataImageRequest>(Arena*);
template<> ::UserInfoRequest* Arena::CreateMaybeMessage<::UserInfoRequest>(Arena*);
template<> ::UserInfoRespond* Arena::CreateMaybeMessage<::UserInfoRespond>(Arena*);
template<> ::VerifyRequest* Arena::CreateMaybeMessage<::VerifyRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum SearchRequest_SearchType : int {
  SearchRequest_SearchType_FRIEND = 0,
  SearchRequest_SearchType_GROUP = 1,
  SearchRequest_SearchType_SearchRequest_SearchType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SearchRequest_SearchType_SearchRequest_SearchType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SearchRequest_SearchType_IsValid(int value);
constexpr SearchRequest_SearchType SearchRequest_SearchType_SearchType_MIN = SearchRequest_SearchType_FRIEND;
constexpr SearchRequest_SearchType SearchRequest_SearchType_SearchType_MAX = SearchRequest_SearchType_GROUP;
constexpr int SearchRequest_SearchType_SearchType_ARRAYSIZE = SearchRequest_SearchType_SearchType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SearchRequest_SearchType_descriptor();
template<typename T>
inline const std::string& SearchRequest_SearchType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SearchRequest_SearchType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SearchRequest_SearchType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SearchRequest_SearchType_descriptor(), enum_t_value);
}
inline bool SearchRequest_SearchType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SearchRequest_SearchType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SearchRequest_SearchType>(
    SearchRequest_SearchType_descriptor(), name, value);
}
enum SearchRequest_SearchMode : int {
  SearchRequest_SearchMode_ACCOUNT = 0,
  SearchRequest_SearchMode_NAME = 1,
  SearchRequest_SearchMode_SearchRequest_SearchMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SearchRequest_SearchMode_SearchRequest_SearchMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SearchRequest_SearchMode_IsValid(int value);
constexpr SearchRequest_SearchMode SearchRequest_SearchMode_SearchMode_MIN = SearchRequest_SearchMode_ACCOUNT;
constexpr SearchRequest_SearchMode SearchRequest_SearchMode_SearchMode_MAX = SearchRequest_SearchMode_NAME;
constexpr int SearchRequest_SearchMode_SearchMode_ARRAYSIZE = SearchRequest_SearchMode_SearchMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SearchRequest_SearchMode_descriptor();
template<typename T>
inline const std::string& SearchRequest_SearchMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SearchRequest_SearchMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SearchRequest_SearchMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SearchRequest_SearchMode_descriptor(), enum_t_value);
}
inline bool SearchRequest_SearchMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SearchRequest_SearchMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SearchRequest_SearchMode>(
    SearchRequest_SearchMode_descriptor(), name, value);
}
enum VerifyRequest_VerifyType : int {
  VerifyRequest_VerifyType_FRIEND = 0,
  VerifyRequest_VerifyType_GROUP = 1,
  VerifyRequest_VerifyType_VerifyRequest_VerifyType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  VerifyRequest_VerifyType_VerifyRequest_VerifyType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool VerifyRequest_VerifyType_IsValid(int value);
constexpr VerifyRequest_VerifyType VerifyRequest_VerifyType_VerifyType_MIN = VerifyRequest_VerifyType_FRIEND;
constexpr VerifyRequest_VerifyType VerifyRequest_VerifyType_VerifyType_MAX = VerifyRequest_VerifyType_GROUP;
constexpr int VerifyRequest_VerifyType_VerifyType_ARRAYSIZE = VerifyRequest_VerifyType_VerifyType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VerifyRequest_VerifyType_descriptor();
template<typename T>
inline const std::string& VerifyRequest_VerifyType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VerifyRequest_VerifyType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VerifyRequest_VerifyType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VerifyRequest_VerifyType_descriptor(), enum_t_value);
}
inline bool VerifyRequest_VerifyType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VerifyRequest_VerifyType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VerifyRequest_VerifyType>(
    VerifyRequest_VerifyType_descriptor(), name, value);
}
enum MessageRequest_msgType : int {
  MessageRequest_msgType_Text = 0,
  MessageRequest_msgType_Image = 1,
  MessageRequest_msgType_File = 2,
  MessageRequest_msgType_MessageRequest_msgType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MessageRequest_msgType_MessageRequest_msgType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MessageRequest_msgType_IsValid(int value);
constexpr MessageRequest_msgType MessageRequest_msgType_msgType_MIN = MessageRequest_msgType_Text;
constexpr MessageRequest_msgType MessageRequest_msgType_msgType_MAX = MessageRequest_msgType_File;
constexpr int MessageRequest_msgType_msgType_ARRAYSIZE = MessageRequest_msgType_msgType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageRequest_msgType_descriptor();
template<typename T>
inline const std::string& MessageRequest_msgType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageRequest_msgType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageRequest_msgType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageRequest_msgType_descriptor(), enum_t_value);
}
inline bool MessageRequest_msgType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MessageRequest_msgType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageRequest_msgType>(
    MessageRequest_msgType_descriptor(), name, value);
}
// ===================================================================

class LoginRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LoginRequest) */ {
 public:
  inline LoginRequest() : LoginRequest(nullptr) {}
  virtual ~LoginRequest();
  explicit constexpr LoginRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginRequest(const LoginRequest& from);
  LoginRequest(LoginRequest&& from) noexcept
    : LoginRequest() {
    *this = ::std::move(from);
  }

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginRequest& operator=(LoginRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginRequest* internal_default_instance() {
    return reinterpret_cast<const LoginRequest*>(
               &_LoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LoginRequest& a, LoginRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginRequest* New() const final {
    return CreateMaybeMessage<LoginRequest>(nullptr);
  }

  LoginRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginRequest& from);
  void MergeFrom(const LoginRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LoginRequest";
  }
  protected:
  explicit LoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_IM_5flogin_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:LoginRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_5flogin_2eproto;
};
// -------------------------------------------------------------------

class RegisterRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RegisterRequest) */ {
 public:
  inline RegisterRequest() : RegisterRequest(nullptr) {}
  virtual ~RegisterRequest();
  explicit constexpr RegisterRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterRequest(const RegisterRequest& from);
  RegisterRequest(RegisterRequest&& from) noexcept
    : RegisterRequest() {
    *this = ::std::move(from);
  }

  inline RegisterRequest& operator=(const RegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterRequest& operator=(RegisterRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterRequest*>(
               &_RegisterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RegisterRequest& a, RegisterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterRequest* New() const final {
    return CreateMaybeMessage<RegisterRequest>(nullptr);
  }

  RegisterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterRequest& from);
  void MergeFrom(const RegisterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RegisterRequest";
  }
  protected:
  explicit RegisterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_IM_5flogin_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kEmailFieldNumber = 3,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // string email = 3;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // @@protoc_insertion_point(class_scope:RegisterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_5flogin_2eproto;
};
// -------------------------------------------------------------------

class UserInfoRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserInfoRequest) */ {
 public:
  inline UserInfoRequest() : UserInfoRequest(nullptr) {}
  virtual ~UserInfoRequest();
  explicit constexpr UserInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserInfoRequest(const UserInfoRequest& from);
  UserInfoRequest(UserInfoRequest&& from) noexcept
    : UserInfoRequest() {
    *this = ::std::move(from);
  }

  inline UserInfoRequest& operator=(const UserInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfoRequest& operator=(UserInfoRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserInfoRequest* internal_default_instance() {
    return reinterpret_cast<const UserInfoRequest*>(
               &_UserInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UserInfoRequest& a, UserInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfoRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserInfoRequest* New() const final {
    return CreateMaybeMessage<UserInfoRequest>(nullptr);
  }

  UserInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserInfoRequest& from);
  void MergeFrom(const UserInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserInfoRequest";
  }
  protected:
  explicit UserInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_IM_5flogin_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // @@protoc_insertion_point(class_scope:UserInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_5flogin_2eproto;
};
// -------------------------------------------------------------------

class SearchRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SearchRequest) */ {
 public:
  inline SearchRequest() : SearchRequest(nullptr) {}
  virtual ~SearchRequest();
  explicit constexpr SearchRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchRequest(const SearchRequest& from);
  SearchRequest(SearchRequest&& from) noexcept
    : SearchRequest() {
    *this = ::std::move(from);
  }

  inline SearchRequest& operator=(const SearchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchRequest& operator=(SearchRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchRequest* internal_default_instance() {
    return reinterpret_cast<const SearchRequest*>(
               &_SearchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SearchRequest& a, SearchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchRequest* New() const final {
    return CreateMaybeMessage<SearchRequest>(nullptr);
  }

  SearchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchRequest& from);
  void MergeFrom(const SearchRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SearchRequest";
  }
  protected:
  explicit SearchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_IM_5flogin_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef SearchRequest_SearchType SearchType;
  static constexpr SearchType FRIEND =
    SearchRequest_SearchType_FRIEND;
  static constexpr SearchType GROUP =
    SearchRequest_SearchType_GROUP;
  static inline bool SearchType_IsValid(int value) {
    return SearchRequest_SearchType_IsValid(value);
  }
  static constexpr SearchType SearchType_MIN =
    SearchRequest_SearchType_SearchType_MIN;
  static constexpr SearchType SearchType_MAX =
    SearchRequest_SearchType_SearchType_MAX;
  static constexpr int SearchType_ARRAYSIZE =
    SearchRequest_SearchType_SearchType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SearchType_descriptor() {
    return SearchRequest_SearchType_descriptor();
  }
  template<typename T>
  static inline const std::string& SearchType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SearchType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SearchType_Name.");
    return SearchRequest_SearchType_Name(enum_t_value);
  }
  static inline bool SearchType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SearchType* value) {
    return SearchRequest_SearchType_Parse(name, value);
  }

  typedef SearchRequest_SearchMode SearchMode;
  static constexpr SearchMode ACCOUNT =
    SearchRequest_SearchMode_ACCOUNT;
  static constexpr SearchMode NAME =
    SearchRequest_SearchMode_NAME;
  static inline bool SearchMode_IsValid(int value) {
    return SearchRequest_SearchMode_IsValid(value);
  }
  static constexpr SearchMode SearchMode_MIN =
    SearchRequest_SearchMode_SearchMode_MIN;
  static constexpr SearchMode SearchMode_MAX =
    SearchRequest_SearchMode_SearchMode_MAX;
  static constexpr int SearchMode_ARRAYSIZE =
    SearchRequest_SearchMode_SearchMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SearchMode_descriptor() {
    return SearchRequest_SearchMode_descriptor();
  }
  template<typename T>
  static inline const std::string& SearchMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SearchMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SearchMode_Name.");
    return SearchRequest_SearchMode_Name(enum_t_value);
  }
  static inline bool SearchMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SearchMode* value) {
    return SearchRequest_SearchMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 3,
    kTypeFieldNumber = 1,
    kModeFieldNumber = 2,
    kOffsetFieldNumber = 4,
  };
  // string content = 3;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // .SearchRequest.SearchType type = 1;
  void clear_type();
  ::SearchRequest_SearchType type() const;
  void set_type(::SearchRequest_SearchType value);
  private:
  ::SearchRequest_SearchType _internal_type() const;
  void _internal_set_type(::SearchRequest_SearchType value);
  public:

  // .SearchRequest.SearchMode mode = 2;
  void clear_mode();
  ::SearchRequest_SearchMode mode() const;
  void set_mode(::SearchRequest_SearchMode value);
  private:
  ::SearchRequest_SearchMode _internal_mode() const;
  void _internal_set_mode(::SearchRequest_SearchMode value);
  public:

  // int32 offset = 4;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int32 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SearchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  int type_;
  int mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_5flogin_2eproto;
};
// -------------------------------------------------------------------

class AddRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AddRequest) */ {
 public:
  inline AddRequest() : AddRequest(nullptr) {}
  virtual ~AddRequest();
  explicit constexpr AddRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddRequest(const AddRequest& from);
  AddRequest(AddRequest&& from) noexcept
    : AddRequest() {
    *this = ::std::move(from);
  }

  inline AddRequest& operator=(const AddRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddRequest& operator=(AddRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddRequest* internal_default_instance() {
    return reinterpret_cast<const AddRequest*>(
               &_AddRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AddRequest& a, AddRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddRequest* New() const final {
    return CreateMaybeMessage<AddRequest>(nullptr);
  }

  AddRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddRequest& from);
  void MergeFrom(const AddRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AddRequest";
  }
  protected:
  explicit AddRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_IM_5flogin_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kFriendIdFieldNumber = 2,
    kVerificationMessageFieldNumber = 3,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string friend_id = 2;
  void clear_friend_id();
  const std::string& friend_id() const;
  void set_friend_id(const std::string& value);
  void set_friend_id(std::string&& value);
  void set_friend_id(const char* value);
  void set_friend_id(const char* value, size_t size);
  std::string* mutable_friend_id();
  std::string* release_friend_id();
  void set_allocated_friend_id(std::string* friend_id);
  private:
  const std::string& _internal_friend_id() const;
  void _internal_set_friend_id(const std::string& value);
  std::string* _internal_mutable_friend_id();
  public:

  // string verification_message = 3;
  void clear_verification_message();
  const std::string& verification_message() const;
  void set_verification_message(const std::string& value);
  void set_verification_message(std::string&& value);
  void set_verification_message(const char* value);
  void set_verification_message(const char* value, size_t size);
  std::string* mutable_verification_message();
  std::string* release_verification_message();
  void set_allocated_verification_message(std::string* verification_message);
  private:
  const std::string& _internal_verification_message() const;
  void _internal_set_verification_message(const std::string& value);
  std::string* _internal_mutable_verification_message();
  public:

  // @@protoc_insertion_point(class_scope:AddRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr friend_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr verification_message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_5flogin_2eproto;
};
// -------------------------------------------------------------------

class ModifyInfoRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ModifyInfoRequest) */ {
 public:
  inline ModifyInfoRequest() : ModifyInfoRequest(nullptr) {}
  virtual ~ModifyInfoRequest();
  explicit constexpr ModifyInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModifyInfoRequest(const ModifyInfoRequest& from);
  ModifyInfoRequest(ModifyInfoRequest&& from) noexcept
    : ModifyInfoRequest() {
    *this = ::std::move(from);
  }

  inline ModifyInfoRequest& operator=(const ModifyInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModifyInfoRequest& operator=(ModifyInfoRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModifyInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModifyInfoRequest* internal_default_instance() {
    return reinterpret_cast<const ModifyInfoRequest*>(
               &_ModifyInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ModifyInfoRequest& a, ModifyInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ModifyInfoRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModifyInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModifyInfoRequest* New() const final {
    return CreateMaybeMessage<ModifyInfoRequest>(nullptr);
  }

  ModifyInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModifyInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModifyInfoRequest& from);
  void MergeFrom(const ModifyInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModifyInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ModifyInfoRequest";
  }
  protected:
  explicit ModifyInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_IM_5flogin_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kEmailFieldNumber = 3,
    kSexFieldNumber = 4,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string email = 3;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // int32 sex = 4;
  void clear_sex();
  ::PROTOBUF_NAMESPACE_ID::int32 sex() const;
  void set_sex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sex() const;
  void _internal_set_sex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ModifyInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::int32 sex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_5flogin_2eproto;
};
// -------------------------------------------------------------------

class VerifyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VerifyRequest) */ {
 public:
  inline VerifyRequest() : VerifyRequest(nullptr) {}
  virtual ~VerifyRequest();
  explicit constexpr VerifyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VerifyRequest(const VerifyRequest& from);
  VerifyRequest(VerifyRequest&& from) noexcept
    : VerifyRequest() {
    *this = ::std::move(from);
  }

  inline VerifyRequest& operator=(const VerifyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VerifyRequest& operator=(VerifyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VerifyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const VerifyRequest* internal_default_instance() {
    return reinterpret_cast<const VerifyRequest*>(
               &_VerifyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(VerifyRequest& a, VerifyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(VerifyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VerifyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VerifyRequest* New() const final {
    return CreateMaybeMessage<VerifyRequest>(nullptr);
  }

  VerifyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VerifyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VerifyRequest& from);
  void MergeFrom(const VerifyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerifyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VerifyRequest";
  }
  protected:
  explicit VerifyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_IM_5flogin_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef VerifyRequest_VerifyType VerifyType;
  static constexpr VerifyType FRIEND =
    VerifyRequest_VerifyType_FRIEND;
  static constexpr VerifyType GROUP =
    VerifyRequest_VerifyType_GROUP;
  static inline bool VerifyType_IsValid(int value) {
    return VerifyRequest_VerifyType_IsValid(value);
  }
  static constexpr VerifyType VerifyType_MIN =
    VerifyRequest_VerifyType_VerifyType_MIN;
  static constexpr VerifyType VerifyType_MAX =
    VerifyRequest_VerifyType_VerifyType_MAX;
  static constexpr int VerifyType_ARRAYSIZE =
    VerifyRequest_VerifyType_VerifyType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  VerifyType_descriptor() {
    return VerifyRequest_VerifyType_descriptor();
  }
  template<typename T>
  static inline const std::string& VerifyType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, VerifyType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function VerifyType_Name.");
    return VerifyRequest_VerifyType_Name(enum_t_value);
  }
  static inline bool VerifyType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      VerifyType* value) {
    return VerifyRequest_VerifyType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kUserInfoFieldNumber = 4,
    kTypeFieldNumber = 2,
    kVtypeFieldNumber = 3,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // .UserInfoRespond user_info = 4;
  bool has_user_info() const;
  private:
  bool _internal_has_user_info() const;
  public:
  void clear_user_info();
  const ::UserInfoRespond& user_info() const;
  ::UserInfoRespond* release_user_info();
  ::UserInfoRespond* mutable_user_info();
  void set_allocated_user_info(::UserInfoRespond* user_info);
  private:
  const ::UserInfoRespond& _internal_user_info() const;
  ::UserInfoRespond* _internal_mutable_user_info();
  public:
  void unsafe_arena_set_allocated_user_info(
      ::UserInfoRespond* user_info);
  ::UserInfoRespond* unsafe_arena_release_user_info();

  // int32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .VerifyRequest.VerifyType vtype = 3;
  void clear_vtype();
  ::VerifyRequest_VerifyType vtype() const;
  void set_vtype(::VerifyRequest_VerifyType value);
  private:
  ::VerifyRequest_VerifyType _internal_vtype() const;
  void _internal_set_vtype(::VerifyRequest_VerifyType value);
  public:

  // @@protoc_insertion_point(class_scope:VerifyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::UserInfoRespond* user_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  int vtype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_5flogin_2eproto;
};
// -------------------------------------------------------------------

class UpdataImageRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UpdataImageRequest) */ {
 public:
  inline UpdataImageRequest() : UpdataImageRequest(nullptr) {}
  virtual ~UpdataImageRequest();
  explicit constexpr UpdataImageRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdataImageRequest(const UpdataImageRequest& from);
  UpdataImageRequest(UpdataImageRequest&& from) noexcept
    : UpdataImageRequest() {
    *this = ::std::move(from);
  }

  inline UpdataImageRequest& operator=(const UpdataImageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdataImageRequest& operator=(UpdataImageRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdataImageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdataImageRequest* internal_default_instance() {
    return reinterpret_cast<const UpdataImageRequest*>(
               &_UpdataImageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UpdataImageRequest& a, UpdataImageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdataImageRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdataImageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdataImageRequest* New() const final {
    return CreateMaybeMessage<UpdataImageRequest>(nullptr);
  }

  UpdataImageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdataImageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdataImageRequest& from);
  void MergeFrom(const UpdataImageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdataImageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UpdataImageRequest";
  }
  protected:
  explicit UpdataImageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_IM_5flogin_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kDataFieldNumber = 2,
    kDataHDFieldNumber = 3,
  };
  // string url = 1;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // bytes dataHD = 3;
  void clear_datahd();
  const std::string& datahd() const;
  void set_datahd(const std::string& value);
  void set_datahd(std::string&& value);
  void set_datahd(const char* value);
  void set_datahd(const void* value, size_t size);
  std::string* mutable_datahd();
  std::string* release_datahd();
  void set_allocated_datahd(std::string* datahd);
  private:
  const std::string& _internal_datahd() const;
  void _internal_set_datahd(const std::string& value);
  std::string* _internal_mutable_datahd();
  public:

  // @@protoc_insertion_point(class_scope:UpdataImageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datahd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_5flogin_2eproto;
};
// -------------------------------------------------------------------

class ImageRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ImageRequest) */ {
 public:
  inline ImageRequest() : ImageRequest(nullptr) {}
  virtual ~ImageRequest();
  explicit constexpr ImageRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImageRequest(const ImageRequest& from);
  ImageRequest(ImageRequest&& from) noexcept
    : ImageRequest() {
    *this = ::std::move(from);
  }

  inline ImageRequest& operator=(const ImageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageRequest& operator=(ImageRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImageRequest* internal_default_instance() {
    return reinterpret_cast<const ImageRequest*>(
               &_ImageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ImageRequest& a, ImageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageRequest* New() const final {
    return CreateMaybeMessage<ImageRequest>(nullptr);
  }

  ImageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImageRequest& from);
  void MergeFrom(const ImageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ImageRequest";
  }
  protected:
  explicit ImageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_IM_5flogin_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
  };
  // string url = 1;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // @@protoc_insertion_point(class_scope:ImageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_5flogin_2eproto;
};
// -------------------------------------------------------------------

class FriendRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FriendRequest) */ {
 public:
  inline FriendRequest() : FriendRequest(nullptr) {}
  virtual ~FriendRequest();
  explicit constexpr FriendRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FriendRequest(const FriendRequest& from);
  FriendRequest(FriendRequest&& from) noexcept
    : FriendRequest() {
    *this = ::std::move(from);
  }

  inline FriendRequest& operator=(const FriendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendRequest& operator=(FriendRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FriendRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FriendRequest* internal_default_instance() {
    return reinterpret_cast<const FriendRequest*>(
               &_FriendRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(FriendRequest& a, FriendRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FriendRequest* New() const final {
    return CreateMaybeMessage<FriendRequest>(nullptr);
  }

  FriendRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FriendRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FriendRequest& from);
  void MergeFrom(const FriendRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FriendRequest";
  }
  protected:
  explicit FriendRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_IM_5flogin_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // @@protoc_insertion_point(class_scope:FriendRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_5flogin_2eproto;
};
// -------------------------------------------------------------------

class DeleteFriendRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DeleteFriendRequest) */ {
 public:
  inline DeleteFriendRequest() : DeleteFriendRequest(nullptr) {}
  virtual ~DeleteFriendRequest();
  explicit constexpr DeleteFriendRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteFriendRequest(const DeleteFriendRequest& from);
  DeleteFriendRequest(DeleteFriendRequest&& from) noexcept
    : DeleteFriendRequest() {
    *this = ::std::move(from);
  }

  inline DeleteFriendRequest& operator=(const DeleteFriendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteFriendRequest& operator=(DeleteFriendRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteFriendRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteFriendRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteFriendRequest*>(
               &_DeleteFriendRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(DeleteFriendRequest& a, DeleteFriendRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteFriendRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteFriendRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteFriendRequest* New() const final {
    return CreateMaybeMessage<DeleteFriendRequest>(nullptr);
  }

  DeleteFriendRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteFriendRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteFriendRequest& from);
  void MergeFrom(const DeleteFriendRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteFriendRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DeleteFriendRequest";
  }
  protected:
  explicit DeleteFriendRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_IM_5flogin_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kTargetFieldNumber = 2,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string target = 2;
  void clear_target();
  const std::string& target() const;
  void set_target(const std::string& value);
  void set_target(std::string&& value);
  void set_target(const char* value);
  void set_target(const char* value, size_t size);
  std::string* mutable_target();
  std::string* release_target();
  void set_allocated_target(std::string* target);
  private:
  const std::string& _internal_target() const;
  void _internal_set_target(const std::string& value);
  std::string* _internal_mutable_target();
  public:

  // @@protoc_insertion_point(class_scope:DeleteFriendRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_5flogin_2eproto;
};
// -------------------------------------------------------------------

class MessageRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MessageRequest) */ {
 public:
  inline MessageRequest() : MessageRequest(nullptr) {}
  virtual ~MessageRequest();
  explicit constexpr MessageRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MessageRequest(const MessageRequest& from);
  MessageRequest(MessageRequest&& from) noexcept
    : MessageRequest() {
    *this = ::std::move(from);
  }

  inline MessageRequest& operator=(const MessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageRequest& operator=(MessageRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageRequest& default_instance() {
    return *internal_default_instance();
  }
  enum RequestTypeCase {
    kTextMessage = 3,
    kImageMessage = 4,
    REQUEST_TYPE_NOT_SET = 0,
  };

  static inline const MessageRequest* internal_default_instance() {
    return reinterpret_cast<const MessageRequest*>(
               &_MessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(MessageRequest& a, MessageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageRequest* New() const final {
    return CreateMaybeMessage<MessageRequest>(nullptr);
  }

  MessageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageRequest& from);
  void MergeFrom(const MessageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MessageRequest";
  }
  protected:
  explicit MessageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_IM_5flogin_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef MessageRequest_msgType msgType;
  static constexpr msgType Text =
    MessageRequest_msgType_Text;
  static constexpr msgType Image =
    MessageRequest_msgType_Image;
  static constexpr msgType File =
    MessageRequest_msgType_File;
  static inline bool msgType_IsValid(int value) {
    return MessageRequest_msgType_IsValid(value);
  }
  static constexpr msgType msgType_MIN =
    MessageRequest_msgType_msgType_MIN;
  static constexpr msgType msgType_MAX =
    MessageRequest_msgType_msgType_MAX;
  static constexpr int msgType_ARRAYSIZE =
    MessageRequest_msgType_msgType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  msgType_descriptor() {
    return MessageRequest_msgType_descriptor();
  }
  template<typename T>
  static inline const std::string& msgType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, msgType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function msgType_Name.");
    return MessageRequest_msgType_Name(enum_t_value);
  }
  static inline bool msgType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      msgType* value) {
    return MessageRequest_msgType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 1,
    kTypeFieldNumber = 2,
    kTextMessageFieldNumber = 3,
    kImageMessageFieldNumber = 4,
  };
  // string target = 1;
  void clear_target();
  const std::string& target() const;
  void set_target(const std::string& value);
  void set_target(std::string&& value);
  void set_target(const char* value);
  void set_target(const char* value, size_t size);
  std::string* mutable_target();
  std::string* release_target();
  void set_allocated_target(std::string* target);
  private:
  const std::string& _internal_target() const;
  void _internal_set_target(const std::string& value);
  std::string* _internal_mutable_target();
  public:

  // .MessageRequest.msgType type = 2;
  void clear_type();
  ::MessageRequest_msgType type() const;
  void set_type(::MessageRequest_msgType value);
  private:
  ::MessageRequest_msgType _internal_type() const;
  void _internal_set_type(::MessageRequest_msgType value);
  public:

  // .TextMessage text_message = 3;
  bool has_text_message() const;
  private:
  bool _internal_has_text_message() const;
  public:
  void clear_text_message();
  const ::TextMessage& text_message() const;
  ::TextMessage* release_text_message();
  ::TextMessage* mutable_text_message();
  void set_allocated_text_message(::TextMessage* text_message);
  private:
  const ::TextMessage& _internal_text_message() const;
  ::TextMessage* _internal_mutable_text_message();
  public:
  void unsafe_arena_set_allocated_text_message(
      ::TextMessage* text_message);
  ::TextMessage* unsafe_arena_release_text_message();

  // .ImageMessage image_message = 4;
  bool has_image_message() const;
  private:
  bool _internal_has_image_message() const;
  public:
  void clear_image_message();
  const ::ImageMessage& image_message() const;
  ::ImageMessage* release_image_message();
  ::ImageMessage* mutable_image_message();
  void set_allocated_image_message(::ImageMessage* image_message);
  private:
  const ::ImageMessage& _internal_image_message() const;
  ::ImageMessage* _internal_mutable_image_message();
  public:
  void unsafe_arena_set_allocated_image_message(
      ::ImageMessage* image_message);
  ::ImageMessage* unsafe_arena_release_image_message();

  void clear_request_type();
  RequestTypeCase request_type_case() const;
  // @@protoc_insertion_point(class_scope:MessageRequest)
 private:
  class _Internal;
  void set_has_text_message();
  void set_has_image_message();

  inline bool has_request_type() const;
  inline void clear_has_request_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_;
  int type_;
  union RequestTypeUnion {
    constexpr RequestTypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::TextMessage* text_message_;
    ::ImageMessage* image_message_;
  } request_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_IM_5flogin_2eproto;
};
// -------------------------------------------------------------------

class TextMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TextMessage) */ {
 public:
  inline TextMessage() : TextMessage(nullptr) {}
  virtual ~TextMessage();
  explicit constexpr TextMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TextMessage(const TextMessage& from);
  TextMessage(TextMessage&& from) noexcept
    : TextMessage() {
    *this = ::std::move(from);
  }

  inline TextMessage& operator=(const TextMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextMessage& operator=(TextMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TextMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TextMessage* internal_default_instance() {
    return reinterpret_cast<const TextMessage*>(
               &_TextMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(TextMessage& a, TextMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TextMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TextMessage* New() const final {
    return CreateMaybeMessage<TextMessage>(nullptr);
  }

  TextMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TextMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TextMessage& from);
  void MergeFrom(const TextMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TextMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TextMessage";
  }
  protected:
  explicit TextMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_IM_5flogin_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
    kMentionFieldNumber = 2,
  };
  // bytes content = 1;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // bytes mention = 2;
  void clear_mention();
  const std::string& mention() const;
  void set_mention(const std::string& value);
  void set_mention(std::string&& value);
  void set_mention(const char* value);
  void set_mention(const void* value, size_t size);
  std::string* mutable_mention();
  std::string* release_mention();
  void set_allocated_mention(std::string* mention);
  private:
  const std::string& _internal_mention() const;
  void _internal_set_mention(const std::string& value);
  std::string* _internal_mutable_mention();
  public:

  // @@protoc_insertion_point(class_scope:TextMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mention_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_5flogin_2eproto;
};
// -------------------------------------------------------------------

class ImageMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ImageMessage) */ {
 public:
  inline ImageMessage() : ImageMessage(nullptr) {}
  virtual ~ImageMessage();
  explicit constexpr ImageMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImageMessage(const ImageMessage& from);
  ImageMessage(ImageMessage&& from) noexcept
    : ImageMessage() {
    *this = ::std::move(from);
  }

  inline ImageMessage& operator=(const ImageMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageMessage& operator=(ImageMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImageMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImageMessage* internal_default_instance() {
    return reinterpret_cast<const ImageMessage*>(
               &_ImageMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ImageMessage& a, ImageMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageMessage* New() const final {
    return CreateMaybeMessage<ImageMessage>(nullptr);
  }

  ImageMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImageMessage& from);
  void MergeFrom(const ImageMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ImageMessage";
  }
  protected:
  explicit ImageMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_IM_5flogin_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMd5FieldNumber = 1,
    kDataFieldNumber = 2,
    kDataHDFieldNumber = 3,
    kContentFieldNumber = 4,
  };
  // string md5 = 1;
  void clear_md5();
  const std::string& md5() const;
  void set_md5(const std::string& value);
  void set_md5(std::string&& value);
  void set_md5(const char* value);
  void set_md5(const char* value, size_t size);
  std::string* mutable_md5();
  std::string* release_md5();
  void set_allocated_md5(std::string* md5);
  private:
  const std::string& _internal_md5() const;
  void _internal_set_md5(const std::string& value);
  std::string* _internal_mutable_md5();
  public:

  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // bytes dataHD = 3;
  void clear_datahd();
  const std::string& datahd() const;
  void set_datahd(const std::string& value);
  void set_datahd(std::string&& value);
  void set_datahd(const char* value);
  void set_datahd(const void* value, size_t size);
  std::string* mutable_datahd();
  std::string* release_datahd();
  void set_allocated_datahd(std::string* datahd);
  private:
  const std::string& _internal_datahd() const;
  void _internal_set_datahd(const std::string& value);
  std::string* _internal_mutable_datahd();
  public:

  // bytes content = 4;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // @@protoc_insertion_point(class_scope:ImageMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr md5_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datahd_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_5flogin_2eproto;
};
// -------------------------------------------------------------------

class PullRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PullRequest) */ {
 public:
  inline PullRequest() : PullRequest(nullptr) {}
  virtual ~PullRequest();
  explicit constexpr PullRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PullRequest(const PullRequest& from);
  PullRequest(PullRequest&& from) noexcept
    : PullRequest() {
    *this = ::std::move(from);
  }

  inline PullRequest& operator=(const PullRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PullRequest& operator=(PullRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PullRequest& default_instance() {
    return *internal_default_instance();
  }
  enum RequestTypeCase {
    kLoginRequest = 1,
    kRegisterRequest = 2,
    kUserInfo = 3,
    kSearchRequest = 4,
    kAddRequest = 5,
    kModifyRequest = 6,
    kVerifyRequest = 7,
    kUpdateImage = 8,
    kImageRequest = 9,
    kFriendRequest = 10,
    kDeleteRequest = 11,
    kMessageRequest = 12,
    REQUEST_TYPE_NOT_SET = 0,
  };

  static inline const PullRequest* internal_default_instance() {
    return reinterpret_cast<const PullRequest*>(
               &_PullRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(PullRequest& a, PullRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PullRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PullRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PullRequest* New() const final {
    return CreateMaybeMessage<PullRequest>(nullptr);
  }

  PullRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PullRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PullRequest& from);
  void MergeFrom(const PullRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PullRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PullRequest";
  }
  protected:
  explicit PullRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_IM_5flogin_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginRequestFieldNumber = 1,
    kRegisterRequestFieldNumber = 2,
    kUserInfoFieldNumber = 3,
    kSearchRequestFieldNumber = 4,
    kAddRequestFieldNumber = 5,
    kModifyRequestFieldNumber = 6,
    kVerifyRequestFieldNumber = 7,
    kUpdateImageFieldNumber = 8,
    kImageRequestFieldNumber = 9,
    kFriendRequestFieldNumber = 10,
    kDeleteRequestFieldNumber = 11,
    kMessageRequestFieldNumber = 12,
  };
  // .LoginRequest login_request = 1;
  bool has_login_request() const;
  private:
  bool _internal_has_login_request() const;
  public:
  void clear_login_request();
  const ::LoginRequest& login_request() const;
  ::LoginRequest* release_login_request();
  ::LoginRequest* mutable_login_request();
  void set_allocated_login_request(::LoginRequest* login_request);
  private:
  const ::LoginRequest& _internal_login_request() const;
  ::LoginRequest* _internal_mutable_login_request();
  public:
  void unsafe_arena_set_allocated_login_request(
      ::LoginRequest* login_request);
  ::LoginRequest* unsafe_arena_release_login_request();

  // .RegisterRequest register_request = 2;
  bool has_register_request() const;
  private:
  bool _internal_has_register_request() const;
  public:
  void clear_register_request();
  const ::RegisterRequest& register_request() const;
  ::RegisterRequest* release_register_request();
  ::RegisterRequest* mutable_register_request();
  void set_allocated_register_request(::RegisterRequest* register_request);
  private:
  const ::RegisterRequest& _internal_register_request() const;
  ::RegisterRequest* _internal_mutable_register_request();
  public:
  void unsafe_arena_set_allocated_register_request(
      ::RegisterRequest* register_request);
  ::RegisterRequest* unsafe_arena_release_register_request();

  // .UserInfoRequest user_info = 3;
  bool has_user_info() const;
  private:
  bool _internal_has_user_info() const;
  public:
  void clear_user_info();
  const ::UserInfoRequest& user_info() const;
  ::UserInfoRequest* release_user_info();
  ::UserInfoRequest* mutable_user_info();
  void set_allocated_user_info(::UserInfoRequest* user_info);
  private:
  const ::UserInfoRequest& _internal_user_info() const;
  ::UserInfoRequest* _internal_mutable_user_info();
  public:
  void unsafe_arena_set_allocated_user_info(
      ::UserInfoRequest* user_info);
  ::UserInfoRequest* unsafe_arena_release_user_info();

  // .SearchRequest search_request = 4;
  bool has_search_request() const;
  private:
  bool _internal_has_search_request() const;
  public:
  void clear_search_request();
  const ::SearchRequest& search_request() const;
  ::SearchRequest* release_search_request();
  ::SearchRequest* mutable_search_request();
  void set_allocated_search_request(::SearchRequest* search_request);
  private:
  const ::SearchRequest& _internal_search_request() const;
  ::SearchRequest* _internal_mutable_search_request();
  public:
  void unsafe_arena_set_allocated_search_request(
      ::SearchRequest* search_request);
  ::SearchRequest* unsafe_arena_release_search_request();

  // .AddRequest add_request = 5;
  bool has_add_request() const;
  private:
  bool _internal_has_add_request() const;
  public:
  void clear_add_request();
  const ::AddRequest& add_request() const;
  ::AddRequest* release_add_request();
  ::AddRequest* mutable_add_request();
  void set_allocated_add_request(::AddRequest* add_request);
  private:
  const ::AddRequest& _internal_add_request() const;
  ::AddRequest* _internal_mutable_add_request();
  public:
  void unsafe_arena_set_allocated_add_request(
      ::AddRequest* add_request);
  ::AddRequest* unsafe_arena_release_add_request();

  // .ModifyInfoRequest modify_request = 6;
  bool has_modify_request() const;
  private:
  bool _internal_has_modify_request() const;
  public:
  void clear_modify_request();
  const ::ModifyInfoRequest& modify_request() const;
  ::ModifyInfoRequest* release_modify_request();
  ::ModifyInfoRequest* mutable_modify_request();
  void set_allocated_modify_request(::ModifyInfoRequest* modify_request);
  private:
  const ::ModifyInfoRequest& _internal_modify_request() const;
  ::ModifyInfoRequest* _internal_mutable_modify_request();
  public:
  void unsafe_arena_set_allocated_modify_request(
      ::ModifyInfoRequest* modify_request);
  ::ModifyInfoRequest* unsafe_arena_release_modify_request();

  // .VerifyRequest verify_request = 7;
  bool has_verify_request() const;
  private:
  bool _internal_has_verify_request() const;
  public:
  void clear_verify_request();
  const ::VerifyRequest& verify_request() const;
  ::VerifyRequest* release_verify_request();
  ::VerifyRequest* mutable_verify_request();
  void set_allocated_verify_request(::VerifyRequest* verify_request);
  private:
  const ::VerifyRequest& _internal_verify_request() const;
  ::VerifyRequest* _internal_mutable_verify_request();
  public:
  void unsafe_arena_set_allocated_verify_request(
      ::VerifyRequest* verify_request);
  ::VerifyRequest* unsafe_arena_release_verify_request();

  // .UpdataImageRequest update_image = 8;
  bool has_update_image() const;
  private:
  bool _internal_has_update_image() const;
  public:
  void clear_update_image();
  const ::UpdataImageRequest& update_image() const;
  ::UpdataImageRequest* release_update_image();
  ::UpdataImageRequest* mutable_update_image();
  void set_allocated_update_image(::UpdataImageRequest* update_image);
  private:
  const ::UpdataImageRequest& _internal_update_image() const;
  ::UpdataImageRequest* _internal_mutable_update_image();
  public:
  void unsafe_arena_set_allocated_update_image(
      ::UpdataImageRequest* update_image);
  ::UpdataImageRequest* unsafe_arena_release_update_image();

  // .ImageRequest image_request = 9;
  bool has_image_request() const;
  private:
  bool _internal_has_image_request() const;
  public:
  void clear_image_request();
  const ::ImageRequest& image_request() const;
  ::ImageRequest* release_image_request();
  ::ImageRequest* mutable_image_request();
  void set_allocated_image_request(::ImageRequest* image_request);
  private:
  const ::ImageRequest& _internal_image_request() const;
  ::ImageRequest* _internal_mutable_image_request();
  public:
  void unsafe_arena_set_allocated_image_request(
      ::ImageRequest* image_request);
  ::ImageRequest* unsafe_arena_release_image_request();

  // .FriendRequest friend_request = 10;
  bool has_friend_request() const;
  private:
  bool _internal_has_friend_request() const;
  public:
  void clear_friend_request();
  const ::FriendRequest& friend_request() const;
  ::FriendRequest* release_friend_request();
  ::FriendRequest* mutable_friend_request();
  void set_allocated_friend_request(::FriendRequest* friend_request);
  private:
  const ::FriendRequest& _internal_friend_request() const;
  ::FriendRequest* _internal_mutable_friend_request();
  public:
  void unsafe_arena_set_allocated_friend_request(
      ::FriendRequest* friend_request);
  ::FriendRequest* unsafe_arena_release_friend_request();

  // .DeleteFriendRequest delete_request = 11;
  bool has_delete_request() const;
  private:
  bool _internal_has_delete_request() const;
  public:
  void clear_delete_request();
  const ::DeleteFriendRequest& delete_request() const;
  ::DeleteFriendRequest* release_delete_request();
  ::DeleteFriendRequest* mutable_delete_request();
  void set_allocated_delete_request(::DeleteFriendRequest* delete_request);
  private:
  const ::DeleteFriendRequest& _internal_delete_request() const;
  ::DeleteFriendRequest* _internal_mutable_delete_request();
  public:
  void unsafe_arena_set_allocated_delete_request(
      ::DeleteFriendRequest* delete_request);
  ::DeleteFriendRequest* unsafe_arena_release_delete_request();

  // .MessageRequest message_request = 12;
  bool has_message_request() const;
  private:
  bool _internal_has_message_request() const;
  public:
  void clear_message_request();
  const ::MessageRequest& message_request() const;
  ::MessageRequest* release_message_request();
  ::MessageRequest* mutable_message_request();
  void set_allocated_message_request(::MessageRequest* message_request);
  private:
  const ::MessageRequest& _internal_message_request() const;
  ::MessageRequest* _internal_mutable_message_request();
  public:
  void unsafe_arena_set_allocated_message_request(
      ::MessageRequest* message_request);
  ::MessageRequest* unsafe_arena_release_message_request();

  void clear_request_type();
  RequestTypeCase request_type_case() const;
  // @@protoc_insertion_point(class_scope:PullRequest)
 private:
  class _Internal;
  void set_has_login_request();
  void set_has_register_request();
  void set_has_user_info();
  void set_has_search_request();
  void set_has_add_request();
  void set_has_modify_request();
  void set_has_verify_request();
  void set_has_update_image();
  void set_has_image_request();
  void set_has_friend_request();
  void set_has_delete_request();
  void set_has_message_request();

  inline bool has_request_type() const;
  inline void clear_has_request_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union RequestTypeUnion {
    constexpr RequestTypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::LoginRequest* login_request_;
    ::RegisterRequest* register_request_;
    ::UserInfoRequest* user_info_;
    ::SearchRequest* search_request_;
    ::AddRequest* add_request_;
    ::ModifyInfoRequest* modify_request_;
    ::VerifyRequest* verify_request_;
    ::UpdataImageRequest* update_image_;
    ::ImageRequest* image_request_;
    ::FriendRequest* friend_request_;
    ::DeleteFriendRequest* delete_request_;
    ::MessageRequest* message_request_;
  } request_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_IM_5flogin_2eproto;
};
// -------------------------------------------------------------------

class SimpleRespond PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SimpleRespond) */ {
 public:
  inline SimpleRespond() : SimpleRespond(nullptr) {}
  virtual ~SimpleRespond();
  explicit constexpr SimpleRespond(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimpleRespond(const SimpleRespond& from);
  SimpleRespond(SimpleRespond&& from) noexcept
    : SimpleRespond() {
    *this = ::std::move(from);
  }

  inline SimpleRespond& operator=(const SimpleRespond& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimpleRespond& operator=(SimpleRespond&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SimpleRespond& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimpleRespond* internal_default_instance() {
    return reinterpret_cast<const SimpleRespond*>(
               &_SimpleRespond_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SimpleRespond& a, SimpleRespond& b) {
    a.Swap(&b);
  }
  inline void Swap(SimpleRespond* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimpleRespond* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SimpleRespond* New() const final {
    return CreateMaybeMessage<SimpleRespond>(nullptr);
  }

  SimpleRespond* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SimpleRespond>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SimpleRespond& from);
  void MergeFrom(const SimpleRespond& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimpleRespond* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SimpleRespond";
  }
  protected:
  explicit SimpleRespond(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_IM_5flogin_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SimpleRespond)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_5flogin_2eproto;
};
// -------------------------------------------------------------------

class UserInfoRespond PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserInfoRespond) */ {
 public:
  inline UserInfoRespond() : UserInfoRespond(nullptr) {}
  virtual ~UserInfoRespond();
  explicit constexpr UserInfoRespond(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserInfoRespond(const UserInfoRespond& from);
  UserInfoRespond(UserInfoRespond&& from) noexcept
    : UserInfoRespond() {
    *this = ::std::move(from);
  }

  inline UserInfoRespond& operator=(const UserInfoRespond& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfoRespond& operator=(UserInfoRespond&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserInfoRespond& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserInfoRespond* internal_default_instance() {
    return reinterpret_cast<const UserInfoRespond*>(
               &_UserInfoRespond_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(UserInfoRespond& a, UserInfoRespond& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfoRespond* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInfoRespond* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserInfoRespond* New() const final {
    return CreateMaybeMessage<UserInfoRespond>(nullptr);
  }

  UserInfoRespond* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserInfoRespond>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserInfoRespond& from);
  void MergeFrom(const UserInfoRespond& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfoRespond* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserInfoRespond";
  }
  protected:
  explicit UserInfoRespond(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_IM_5flogin_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kUsernameFieldNumber = 2,
    kEmailFieldNumber = 3,
    kCreatetimeFieldNumber = 4,
    kSexFieldNumber = 5,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // string username = 2;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string email = 3;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string createtime = 4;
  void clear_createtime();
  const std::string& createtime() const;
  void set_createtime(const std::string& value);
  void set_createtime(std::string&& value);
  void set_createtime(const char* value);
  void set_createtime(const char* value, size_t size);
  std::string* mutable_createtime();
  std::string* release_createtime();
  void set_allocated_createtime(std::string* createtime);
  private:
  const std::string& _internal_createtime() const;
  void _internal_set_createtime(const std::string& value);
  std::string* _internal_mutable_createtime();
  public:

  // bool sex = 5;
  void clear_sex();
  bool sex() const;
  void set_sex(bool value);
  private:
  bool _internal_sex() const;
  void _internal_set_sex(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UserInfoRespond)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr createtime_;
  bool sex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_5flogin_2eproto;
};
// -------------------------------------------------------------------

class SearchRespond PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SearchRespond) */ {
 public:
  inline SearchRespond() : SearchRespond(nullptr) {}
  virtual ~SearchRespond();
  explicit constexpr SearchRespond(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchRespond(const SearchRespond& from);
  SearchRespond(SearchRespond&& from) noexcept
    : SearchRespond() {
    *this = ::std::move(from);
  }

  inline SearchRespond& operator=(const SearchRespond& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchRespond& operator=(SearchRespond&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchRespond& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchRespond* internal_default_instance() {
    return reinterpret_cast<const SearchRespond*>(
               &_SearchRespond_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SearchRespond& a, SearchRespond& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchRespond* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchRespond* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchRespond* New() const final {
    return CreateMaybeMessage<SearchRespond>(nullptr);
  }

  SearchRespond* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchRespond>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchRespond& from);
  void MergeFrom(const SearchRespond& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchRespond* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SearchRespond";
  }
  protected:
  explicit SearchRespond(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_IM_5flogin_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // repeated .UserInfoRespond info = 1;
  int info_size() const;
  private:
  int _internal_info_size() const;
  public:
  void clear_info();
  ::UserInfoRespond* mutable_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UserInfoRespond >*
      mutable_info();
  private:
  const ::UserInfoRespond& _internal_info(int index) const;
  ::UserInfoRespond* _internal_add_info();
  public:
  const ::UserInfoRespond& info(int index) const;
  ::UserInfoRespond* add_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UserInfoRespond >&
      info() const;

  // @@protoc_insertion_point(class_scope:SearchRespond)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UserInfoRespond > info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_5flogin_2eproto;
};
// -------------------------------------------------------------------

class ImageRespond PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ImageRespond) */ {
 public:
  inline ImageRespond() : ImageRespond(nullptr) {}
  virtual ~ImageRespond();
  explicit constexpr ImageRespond(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImageRespond(const ImageRespond& from);
  ImageRespond(ImageRespond&& from) noexcept
    : ImageRespond() {
    *this = ::std::move(from);
  }

  inline ImageRespond& operator=(const ImageRespond& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageRespond& operator=(ImageRespond&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImageRespond& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImageRespond* internal_default_instance() {
    return reinterpret_cast<const ImageRespond*>(
               &_ImageRespond_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ImageRespond& a, ImageRespond& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageRespond* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageRespond* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageRespond* New() const final {
    return CreateMaybeMessage<ImageRespond>(nullptr);
  }

  ImageRespond* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageRespond>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImageRespond& from);
  void MergeFrom(const ImageRespond& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageRespond* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ImageRespond";
  }
  protected:
  explicit ImageRespond(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_IM_5flogin_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:ImageRespond)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_5flogin_2eproto;
};
// -------------------------------------------------------------------

class FriendRespond PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FriendRespond) */ {
 public:
  inline FriendRespond() : FriendRespond(nullptr) {}
  virtual ~FriendRespond();
  explicit constexpr FriendRespond(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FriendRespond(const FriendRespond& from);
  FriendRespond(FriendRespond&& from) noexcept
    : FriendRespond() {
    *this = ::std::move(from);
  }

  inline FriendRespond& operator=(const FriendRespond& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendRespond& operator=(FriendRespond&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FriendRespond& default_instance() {
    return *internal_default_instance();
  }
  static inline const FriendRespond* internal_default_instance() {
    return reinterpret_cast<const FriendRespond*>(
               &_FriendRespond_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(FriendRespond& a, FriendRespond& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendRespond* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendRespond* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FriendRespond* New() const final {
    return CreateMaybeMessage<FriendRespond>(nullptr);
  }

  FriendRespond* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FriendRespond>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FriendRespond& from);
  void MergeFrom(const FriendRespond& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendRespond* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FriendRespond";
  }
  protected:
  explicit FriendRespond(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_IM_5flogin_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfosFieldNumber = 1,
  };
  // repeated .UserInfoRespond infos = 1;
  int infos_size() const;
  private:
  int _internal_infos_size() const;
  public:
  void clear_infos();
  ::UserInfoRespond* mutable_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UserInfoRespond >*
      mutable_infos();
  private:
  const ::UserInfoRespond& _internal_infos(int index) const;
  ::UserInfoRespond* _internal_add_infos();
  public:
  const ::UserInfoRespond& infos(int index) const;
  ::UserInfoRespond* add_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UserInfoRespond >&
      infos() const;

  // @@protoc_insertion_point(class_scope:FriendRespond)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UserInfoRespond > infos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_5flogin_2eproto;
};
// -------------------------------------------------------------------

class PullRespond PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PullRespond) */ {
 public:
  inline PullRespond() : PullRespond(nullptr) {}
  virtual ~PullRespond();
  explicit constexpr PullRespond(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PullRespond(const PullRespond& from);
  PullRespond(PullRespond&& from) noexcept
    : PullRespond() {
    *this = ::std::move(from);
  }

  inline PullRespond& operator=(const PullRespond& from) {
    CopyFrom(from);
    return *this;
  }
  inline PullRespond& operator=(PullRespond&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PullRespond& default_instance() {
    return *internal_default_instance();
  }
  enum RequestTypeCase {
    kSimpleRespond = 1,
    kUserInfo = 2,
    kSearchRespond = 3,
    kServerPush = 4,
    kImageRespond = 6,
    kFriendRespond = 7,
    REQUEST_TYPE_NOT_SET = 0,
  };

  static inline const PullRespond* internal_default_instance() {
    return reinterpret_cast<const PullRespond*>(
               &_PullRespond_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(PullRespond& a, PullRespond& b) {
    a.Swap(&b);
  }
  inline void Swap(PullRespond* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PullRespond* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PullRespond* New() const final {
    return CreateMaybeMessage<PullRespond>(nullptr);
  }

  PullRespond* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PullRespond>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PullRespond& from);
  void MergeFrom(const PullRespond& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PullRespond* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PullRespond";
  }
  protected:
  explicit PullRespond(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_IM_5flogin_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSimpleRespondFieldNumber = 1,
    kUserInfoFieldNumber = 2,
    kSearchRespondFieldNumber = 3,
    kServerPushFieldNumber = 4,
    kImageRespondFieldNumber = 6,
    kFriendRespondFieldNumber = 7,
  };
  // .SimpleRespond simple_respond = 1;
  bool has_simple_respond() const;
  private:
  bool _internal_has_simple_respond() const;
  public:
  void clear_simple_respond();
  const ::SimpleRespond& simple_respond() const;
  ::SimpleRespond* release_simple_respond();
  ::SimpleRespond* mutable_simple_respond();
  void set_allocated_simple_respond(::SimpleRespond* simple_respond);
  private:
  const ::SimpleRespond& _internal_simple_respond() const;
  ::SimpleRespond* _internal_mutable_simple_respond();
  public:
  void unsafe_arena_set_allocated_simple_respond(
      ::SimpleRespond* simple_respond);
  ::SimpleRespond* unsafe_arena_release_simple_respond();

  // .UserInfoRespond user_info = 2;
  bool has_user_info() const;
  private:
  bool _internal_has_user_info() const;
  public:
  void clear_user_info();
  const ::UserInfoRespond& user_info() const;
  ::UserInfoRespond* release_user_info();
  ::UserInfoRespond* mutable_user_info();
  void set_allocated_user_info(::UserInfoRespond* user_info);
  private:
  const ::UserInfoRespond& _internal_user_info() const;
  ::UserInfoRespond* _internal_mutable_user_info();
  public:
  void unsafe_arena_set_allocated_user_info(
      ::UserInfoRespond* user_info);
  ::UserInfoRespond* unsafe_arena_release_user_info();

  // .SearchRespond search_respond = 3;
  bool has_search_respond() const;
  private:
  bool _internal_has_search_respond() const;
  public:
  void clear_search_respond();
  const ::SearchRespond& search_respond() const;
  ::SearchRespond* release_search_respond();
  ::SearchRespond* mutable_search_respond();
  void set_allocated_search_respond(::SearchRespond* search_respond);
  private:
  const ::SearchRespond& _internal_search_respond() const;
  ::SearchRespond* _internal_mutable_search_respond();
  public:
  void unsafe_arena_set_allocated_search_respond(
      ::SearchRespond* search_respond);
  ::SearchRespond* unsafe_arena_release_search_respond();

  // .ServerPush server_push = 4;
  bool has_server_push() const;
  private:
  bool _internal_has_server_push() const;
  public:
  void clear_server_push();
  const ::ServerPush& server_push() const;
  ::ServerPush* release_server_push();
  ::ServerPush* mutable_server_push();
  void set_allocated_server_push(::ServerPush* server_push);
  private:
  const ::ServerPush& _internal_server_push() const;
  ::ServerPush* _internal_mutable_server_push();
  public:
  void unsafe_arena_set_allocated_server_push(
      ::ServerPush* server_push);
  ::ServerPush* unsafe_arena_release_server_push();

  // .ImageRespond image_respond = 6;
  bool has_image_respond() const;
  private:
  bool _internal_has_image_respond() const;
  public:
  void clear_image_respond();
  const ::ImageRespond& image_respond() const;
  ::ImageRespond* release_image_respond();
  ::ImageRespond* mutable_image_respond();
  void set_allocated_image_respond(::ImageRespond* image_respond);
  private:
  const ::ImageRespond& _internal_image_respond() const;
  ::ImageRespond* _internal_mutable_image_respond();
  public:
  void unsafe_arena_set_allocated_image_respond(
      ::ImageRespond* image_respond);
  ::ImageRespond* unsafe_arena_release_image_respond();

  // .FriendRespond friend_respond = 7;
  bool has_friend_respond() const;
  private:
  bool _internal_has_friend_respond() const;
  public:
  void clear_friend_respond();
  const ::FriendRespond& friend_respond() const;
  ::FriendRespond* release_friend_respond();
  ::FriendRespond* mutable_friend_respond();
  void set_allocated_friend_respond(::FriendRespond* friend_respond);
  private:
  const ::FriendRespond& _internal_friend_respond() const;
  ::FriendRespond* _internal_mutable_friend_respond();
  public:
  void unsafe_arena_set_allocated_friend_respond(
      ::FriendRespond* friend_respond);
  ::FriendRespond* unsafe_arena_release_friend_respond();

  void clear_request_type();
  RequestTypeCase request_type_case() const;
  // @@protoc_insertion_point(class_scope:PullRespond)
 private:
  class _Internal;
  void set_has_simple_respond();
  void set_has_user_info();
  void set_has_search_respond();
  void set_has_server_push();
  void set_has_image_respond();
  void set_has_friend_respond();

  inline bool has_request_type() const;
  inline void clear_has_request_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union RequestTypeUnion {
    constexpr RequestTypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::SimpleRespond* simple_respond_;
    ::UserInfoRespond* user_info_;
    ::SearchRespond* search_respond_;
    ::ServerPush* server_push_;
    ::ImageRespond* image_respond_;
    ::FriendRespond* friend_respond_;
  } request_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_IM_5flogin_2eproto;
};
// -------------------------------------------------------------------

class ServerPush PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServerPush) */ {
 public:
  inline ServerPush() : ServerPush(nullptr) {}
  virtual ~ServerPush();
  explicit constexpr ServerPush(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerPush(const ServerPush& from);
  ServerPush(ServerPush&& from) noexcept
    : ServerPush() {
    *this = ::std::move(from);
  }

  inline ServerPush& operator=(const ServerPush& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerPush& operator=(ServerPush&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerPush& default_instance() {
    return *internal_default_instance();
  }
  enum RequestTypeCase {
    kAddRequest = 1,
    kVerifyRequest = 2,
    kMessageRequest = 3,
    kDeleteRequest = 4,
    REQUEST_TYPE_NOT_SET = 0,
  };

  static inline const ServerPush* internal_default_instance() {
    return reinterpret_cast<const ServerPush*>(
               &_ServerPush_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ServerPush& a, ServerPush& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerPush* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerPush* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerPush* New() const final {
    return CreateMaybeMessage<ServerPush>(nullptr);
  }

  ServerPush* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerPush>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerPush& from);
  void MergeFrom(const ServerPush& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerPush* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServerPush";
  }
  protected:
  explicit ServerPush(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_IM_5flogin_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddRequestFieldNumber = 1,
    kVerifyRequestFieldNumber = 2,
    kMessageRequestFieldNumber = 3,
    kDeleteRequestFieldNumber = 4,
  };
  // .AddRequest add_request = 1;
  bool has_add_request() const;
  private:
  bool _internal_has_add_request() const;
  public:
  void clear_add_request();
  const ::AddRequest& add_request() const;
  ::AddRequest* release_add_request();
  ::AddRequest* mutable_add_request();
  void set_allocated_add_request(::AddRequest* add_request);
  private:
  const ::AddRequest& _internal_add_request() const;
  ::AddRequest* _internal_mutable_add_request();
  public:
  void unsafe_arena_set_allocated_add_request(
      ::AddRequest* add_request);
  ::AddRequest* unsafe_arena_release_add_request();

  // .VerifyRequest verify_request = 2;
  bool has_verify_request() const;
  private:
  bool _internal_has_verify_request() const;
  public:
  void clear_verify_request();
  const ::VerifyRequest& verify_request() const;
  ::VerifyRequest* release_verify_request();
  ::VerifyRequest* mutable_verify_request();
  void set_allocated_verify_request(::VerifyRequest* verify_request);
  private:
  const ::VerifyRequest& _internal_verify_request() const;
  ::VerifyRequest* _internal_mutable_verify_request();
  public:
  void unsafe_arena_set_allocated_verify_request(
      ::VerifyRequest* verify_request);
  ::VerifyRequest* unsafe_arena_release_verify_request();

  // .MessageRequest message_request = 3;
  bool has_message_request() const;
  private:
  bool _internal_has_message_request() const;
  public:
  void clear_message_request();
  const ::MessageRequest& message_request() const;
  ::MessageRequest* release_message_request();
  ::MessageRequest* mutable_message_request();
  void set_allocated_message_request(::MessageRequest* message_request);
  private:
  const ::MessageRequest& _internal_message_request() const;
  ::MessageRequest* _internal_mutable_message_request();
  public:
  void unsafe_arena_set_allocated_message_request(
      ::MessageRequest* message_request);
  ::MessageRequest* unsafe_arena_release_message_request();

  // .DeleteFriendRequest delete_request = 4;
  bool has_delete_request() const;
  private:
  bool _internal_has_delete_request() const;
  public:
  void clear_delete_request();
  const ::DeleteFriendRequest& delete_request() const;
  ::DeleteFriendRequest* release_delete_request();
  ::DeleteFriendRequest* mutable_delete_request();
  void set_allocated_delete_request(::DeleteFriendRequest* delete_request);
  private:
  const ::DeleteFriendRequest& _internal_delete_request() const;
  ::DeleteFriendRequest* _internal_mutable_delete_request();
  public:
  void unsafe_arena_set_allocated_delete_request(
      ::DeleteFriendRequest* delete_request);
  ::DeleteFriendRequest* unsafe_arena_release_delete_request();

  void clear_request_type();
  RequestTypeCase request_type_case() const;
  // @@protoc_insertion_point(class_scope:ServerPush)
 private:
  class _Internal;
  void set_has_add_request();
  void set_has_verify_request();
  void set_has_message_request();
  void set_has_delete_request();

  inline bool has_request_type() const;
  inline void clear_has_request_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union RequestTypeUnion {
    constexpr RequestTypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::AddRequest* add_request_;
    ::VerifyRequest* verify_request_;
    ::MessageRequest* message_request_;
    ::DeleteFriendRequest* delete_request_;
  } request_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_IM_5flogin_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LoginRequest

// string account = 1;
inline void LoginRequest::clear_account() {
  account_.ClearToEmpty();
}
inline const std::string& LoginRequest::account() const {
  // @@protoc_insertion_point(field_get:LoginRequest.account)
  return _internal_account();
}
inline void LoginRequest::set_account(const std::string& value) {
  _internal_set_account(value);
  // @@protoc_insertion_point(field_set:LoginRequest.account)
}
inline std::string* LoginRequest::mutable_account() {
  // @@protoc_insertion_point(field_mutable:LoginRequest.account)
  return _internal_mutable_account();
}
inline const std::string& LoginRequest::_internal_account() const {
  return account_.Get();
}
inline void LoginRequest::_internal_set_account(const std::string& value) {
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LoginRequest::set_account(std::string&& value) {
  
  account_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LoginRequest.account)
}
inline void LoginRequest::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:LoginRequest.account)
}
inline void LoginRequest::set_account(const char* value,
    size_t size) {
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LoginRequest.account)
}
inline std::string* LoginRequest::_internal_mutable_account() {
  
  return account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LoginRequest::release_account() {
  // @@protoc_insertion_point(field_release:LoginRequest.account)
  return account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoginRequest::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LoginRequest.account)
}

// string password = 2;
inline void LoginRequest::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& LoginRequest::password() const {
  // @@protoc_insertion_point(field_get:LoginRequest.password)
  return _internal_password();
}
inline void LoginRequest::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:LoginRequest.password)
}
inline std::string* LoginRequest::mutable_password() {
  // @@protoc_insertion_point(field_mutable:LoginRequest.password)
  return _internal_mutable_password();
}
inline const std::string& LoginRequest::_internal_password() const {
  return password_.Get();
}
inline void LoginRequest::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LoginRequest::set_password(std::string&& value) {
  
  password_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LoginRequest.password)
}
inline void LoginRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:LoginRequest.password)
}
inline void LoginRequest::set_password(const char* value,
    size_t size) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LoginRequest.password)
}
inline std::string* LoginRequest::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LoginRequest::release_password() {
  // @@protoc_insertion_point(field_release:LoginRequest.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoginRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LoginRequest.password)
}

// -------------------------------------------------------------------

// RegisterRequest

// string username = 1;
inline void RegisterRequest::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& RegisterRequest::username() const {
  // @@protoc_insertion_point(field_get:RegisterRequest.username)
  return _internal_username();
}
inline void RegisterRequest::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:RegisterRequest.username)
}
inline std::string* RegisterRequest::mutable_username() {
  // @@protoc_insertion_point(field_mutable:RegisterRequest.username)
  return _internal_mutable_username();
}
inline const std::string& RegisterRequest::_internal_username() const {
  return username_.Get();
}
inline void RegisterRequest::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RegisterRequest::set_username(std::string&& value) {
  
  username_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RegisterRequest.username)
}
inline void RegisterRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:RegisterRequest.username)
}
inline void RegisterRequest::set_username(const char* value,
    size_t size) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RegisterRequest.username)
}
inline std::string* RegisterRequest::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RegisterRequest::release_username() {
  // @@protoc_insertion_point(field_release:RegisterRequest.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RegisterRequest.username)
}

// string password = 2;
inline void RegisterRequest::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& RegisterRequest::password() const {
  // @@protoc_insertion_point(field_get:RegisterRequest.password)
  return _internal_password();
}
inline void RegisterRequest::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:RegisterRequest.password)
}
inline std::string* RegisterRequest::mutable_password() {
  // @@protoc_insertion_point(field_mutable:RegisterRequest.password)
  return _internal_mutable_password();
}
inline const std::string& RegisterRequest::_internal_password() const {
  return password_.Get();
}
inline void RegisterRequest::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RegisterRequest::set_password(std::string&& value) {
  
  password_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RegisterRequest.password)
}
inline void RegisterRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:RegisterRequest.password)
}
inline void RegisterRequest::set_password(const char* value,
    size_t size) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RegisterRequest.password)
}
inline std::string* RegisterRequest::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RegisterRequest::release_password() {
  // @@protoc_insertion_point(field_release:RegisterRequest.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RegisterRequest.password)
}

// string email = 3;
inline void RegisterRequest::clear_email() {
  email_.ClearToEmpty();
}
inline const std::string& RegisterRequest::email() const {
  // @@protoc_insertion_point(field_get:RegisterRequest.email)
  return _internal_email();
}
inline void RegisterRequest::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:RegisterRequest.email)
}
inline std::string* RegisterRequest::mutable_email() {
  // @@protoc_insertion_point(field_mutable:RegisterRequest.email)
  return _internal_mutable_email();
}
inline const std::string& RegisterRequest::_internal_email() const {
  return email_.Get();
}
inline void RegisterRequest::_internal_set_email(const std::string& value) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RegisterRequest::set_email(std::string&& value) {
  
  email_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RegisterRequest.email)
}
inline void RegisterRequest::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:RegisterRequest.email)
}
inline void RegisterRequest::set_email(const char* value,
    size_t size) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RegisterRequest.email)
}
inline std::string* RegisterRequest::_internal_mutable_email() {
  
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RegisterRequest::release_email() {
  // @@protoc_insertion_point(field_release:RegisterRequest.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterRequest::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RegisterRequest.email)
}

// -------------------------------------------------------------------

// UserInfoRequest

// string account = 1;
inline void UserInfoRequest::clear_account() {
  account_.ClearToEmpty();
}
inline const std::string& UserInfoRequest::account() const {
  // @@protoc_insertion_point(field_get:UserInfoRequest.account)
  return _internal_account();
}
inline void UserInfoRequest::set_account(const std::string& value) {
  _internal_set_account(value);
  // @@protoc_insertion_point(field_set:UserInfoRequest.account)
}
inline std::string* UserInfoRequest::mutable_account() {
  // @@protoc_insertion_point(field_mutable:UserInfoRequest.account)
  return _internal_mutable_account();
}
inline const std::string& UserInfoRequest::_internal_account() const {
  return account_.Get();
}
inline void UserInfoRequest::_internal_set_account(const std::string& value) {
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UserInfoRequest::set_account(std::string&& value) {
  
  account_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UserInfoRequest.account)
}
inline void UserInfoRequest::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:UserInfoRequest.account)
}
inline void UserInfoRequest::set_account(const char* value,
    size_t size) {
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UserInfoRequest.account)
}
inline std::string* UserInfoRequest::_internal_mutable_account() {
  
  return account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UserInfoRequest::release_account() {
  // @@protoc_insertion_point(field_release:UserInfoRequest.account)
  return account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserInfoRequest::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UserInfoRequest.account)
}

// -------------------------------------------------------------------

// SearchRequest

// .SearchRequest.SearchType type = 1;
inline void SearchRequest::clear_type() {
  type_ = 0;
}
inline ::SearchRequest_SearchType SearchRequest::_internal_type() const {
  return static_cast< ::SearchRequest_SearchType >(type_);
}
inline ::SearchRequest_SearchType SearchRequest::type() const {
  // @@protoc_insertion_point(field_get:SearchRequest.type)
  return _internal_type();
}
inline void SearchRequest::_internal_set_type(::SearchRequest_SearchType value) {
  
  type_ = value;
}
inline void SearchRequest::set_type(::SearchRequest_SearchType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:SearchRequest.type)
}

// .SearchRequest.SearchMode mode = 2;
inline void SearchRequest::clear_mode() {
  mode_ = 0;
}
inline ::SearchRequest_SearchMode SearchRequest::_internal_mode() const {
  return static_cast< ::SearchRequest_SearchMode >(mode_);
}
inline ::SearchRequest_SearchMode SearchRequest::mode() const {
  // @@protoc_insertion_point(field_get:SearchRequest.mode)
  return _internal_mode();
}
inline void SearchRequest::_internal_set_mode(::SearchRequest_SearchMode value) {
  
  mode_ = value;
}
inline void SearchRequest::set_mode(::SearchRequest_SearchMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:SearchRequest.mode)
}

// string content = 3;
inline void SearchRequest::clear_content() {
  content_.ClearToEmpty();
}
inline const std::string& SearchRequest::content() const {
  // @@protoc_insertion_point(field_get:SearchRequest.content)
  return _internal_content();
}
inline void SearchRequest::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:SearchRequest.content)
}
inline std::string* SearchRequest::mutable_content() {
  // @@protoc_insertion_point(field_mutable:SearchRequest.content)
  return _internal_mutable_content();
}
inline const std::string& SearchRequest::_internal_content() const {
  return content_.Get();
}
inline void SearchRequest::_internal_set_content(const std::string& value) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SearchRequest::set_content(std::string&& value) {
  
  content_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SearchRequest.content)
}
inline void SearchRequest::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SearchRequest.content)
}
inline void SearchRequest::set_content(const char* value,
    size_t size) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SearchRequest.content)
}
inline std::string* SearchRequest::_internal_mutable_content() {
  
  return content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SearchRequest::release_content() {
  // @@protoc_insertion_point(field_release:SearchRequest.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SearchRequest::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SearchRequest.content)
}

// int32 offset = 4;
inline void SearchRequest::clear_offset() {
  offset_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SearchRequest::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SearchRequest::offset() const {
  // @@protoc_insertion_point(field_get:SearchRequest.offset)
  return _internal_offset();
}
inline void SearchRequest::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  offset_ = value;
}
inline void SearchRequest::set_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:SearchRequest.offset)
}

// -------------------------------------------------------------------

// AddRequest

// string user_id = 1;
inline void AddRequest::clear_user_id() {
  user_id_.ClearToEmpty();
}
inline const std::string& AddRequest::user_id() const {
  // @@protoc_insertion_point(field_get:AddRequest.user_id)
  return _internal_user_id();
}
inline void AddRequest::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:AddRequest.user_id)
}
inline std::string* AddRequest::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:AddRequest.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& AddRequest::_internal_user_id() const {
  return user_id_.Get();
}
inline void AddRequest::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddRequest::set_user_id(std::string&& value) {
  
  user_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AddRequest.user_id)
}
inline void AddRequest::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AddRequest.user_id)
}
inline void AddRequest::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AddRequest.user_id)
}
inline std::string* AddRequest::_internal_mutable_user_id() {
  
  return user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:AddRequest.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AddRequest.user_id)
}

// string friend_id = 2;
inline void AddRequest::clear_friend_id() {
  friend_id_.ClearToEmpty();
}
inline const std::string& AddRequest::friend_id() const {
  // @@protoc_insertion_point(field_get:AddRequest.friend_id)
  return _internal_friend_id();
}
inline void AddRequest::set_friend_id(const std::string& value) {
  _internal_set_friend_id(value);
  // @@protoc_insertion_point(field_set:AddRequest.friend_id)
}
inline std::string* AddRequest::mutable_friend_id() {
  // @@protoc_insertion_point(field_mutable:AddRequest.friend_id)
  return _internal_mutable_friend_id();
}
inline const std::string& AddRequest::_internal_friend_id() const {
  return friend_id_.Get();
}
inline void AddRequest::_internal_set_friend_id(const std::string& value) {
  
  friend_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddRequest::set_friend_id(std::string&& value) {
  
  friend_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AddRequest.friend_id)
}
inline void AddRequest::set_friend_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  friend_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AddRequest.friend_id)
}
inline void AddRequest::set_friend_id(const char* value,
    size_t size) {
  
  friend_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AddRequest.friend_id)
}
inline std::string* AddRequest::_internal_mutable_friend_id() {
  
  return friend_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddRequest::release_friend_id() {
  // @@protoc_insertion_point(field_release:AddRequest.friend_id)
  return friend_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddRequest::set_allocated_friend_id(std::string* friend_id) {
  if (friend_id != nullptr) {
    
  } else {
    
  }
  friend_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), friend_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AddRequest.friend_id)
}

// string verification_message = 3;
inline void AddRequest::clear_verification_message() {
  verification_message_.ClearToEmpty();
}
inline const std::string& AddRequest::verification_message() const {
  // @@protoc_insertion_point(field_get:AddRequest.verification_message)
  return _internal_verification_message();
}
inline void AddRequest::set_verification_message(const std::string& value) {
  _internal_set_verification_message(value);
  // @@protoc_insertion_point(field_set:AddRequest.verification_message)
}
inline std::string* AddRequest::mutable_verification_message() {
  // @@protoc_insertion_point(field_mutable:AddRequest.verification_message)
  return _internal_mutable_verification_message();
}
inline const std::string& AddRequest::_internal_verification_message() const {
  return verification_message_.Get();
}
inline void AddRequest::_internal_set_verification_message(const std::string& value) {
  
  verification_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddRequest::set_verification_message(std::string&& value) {
  
  verification_message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AddRequest.verification_message)
}
inline void AddRequest::set_verification_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  verification_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AddRequest.verification_message)
}
inline void AddRequest::set_verification_message(const char* value,
    size_t size) {
  
  verification_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AddRequest.verification_message)
}
inline std::string* AddRequest::_internal_mutable_verification_message() {
  
  return verification_message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddRequest::release_verification_message() {
  // @@protoc_insertion_point(field_release:AddRequest.verification_message)
  return verification_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddRequest::set_allocated_verification_message(std::string* verification_message) {
  if (verification_message != nullptr) {
    
  } else {
    
  }
  verification_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), verification_message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AddRequest.verification_message)
}

// -------------------------------------------------------------------

// ModifyInfoRequest

// string user_id = 1;
inline void ModifyInfoRequest::clear_user_id() {
  user_id_.ClearToEmpty();
}
inline const std::string& ModifyInfoRequest::user_id() const {
  // @@protoc_insertion_point(field_get:ModifyInfoRequest.user_id)
  return _internal_user_id();
}
inline void ModifyInfoRequest::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:ModifyInfoRequest.user_id)
}
inline std::string* ModifyInfoRequest::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:ModifyInfoRequest.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& ModifyInfoRequest::_internal_user_id() const {
  return user_id_.Get();
}
inline void ModifyInfoRequest::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ModifyInfoRequest::set_user_id(std::string&& value) {
  
  user_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ModifyInfoRequest.user_id)
}
inline void ModifyInfoRequest::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ModifyInfoRequest.user_id)
}
inline void ModifyInfoRequest::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ModifyInfoRequest.user_id)
}
inline std::string* ModifyInfoRequest::_internal_mutable_user_id() {
  
  return user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ModifyInfoRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:ModifyInfoRequest.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ModifyInfoRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ModifyInfoRequest.user_id)
}

// string name = 2;
inline void ModifyInfoRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ModifyInfoRequest::name() const {
  // @@protoc_insertion_point(field_get:ModifyInfoRequest.name)
  return _internal_name();
}
inline void ModifyInfoRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ModifyInfoRequest.name)
}
inline std::string* ModifyInfoRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ModifyInfoRequest.name)
  return _internal_mutable_name();
}
inline const std::string& ModifyInfoRequest::_internal_name() const {
  return name_.Get();
}
inline void ModifyInfoRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ModifyInfoRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ModifyInfoRequest.name)
}
inline void ModifyInfoRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ModifyInfoRequest.name)
}
inline void ModifyInfoRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ModifyInfoRequest.name)
}
inline std::string* ModifyInfoRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ModifyInfoRequest::release_name() {
  // @@protoc_insertion_point(field_release:ModifyInfoRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ModifyInfoRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ModifyInfoRequest.name)
}

// string email = 3;
inline void ModifyInfoRequest::clear_email() {
  email_.ClearToEmpty();
}
inline const std::string& ModifyInfoRequest::email() const {
  // @@protoc_insertion_point(field_get:ModifyInfoRequest.email)
  return _internal_email();
}
inline void ModifyInfoRequest::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:ModifyInfoRequest.email)
}
inline std::string* ModifyInfoRequest::mutable_email() {
  // @@protoc_insertion_point(field_mutable:ModifyInfoRequest.email)
  return _internal_mutable_email();
}
inline const std::string& ModifyInfoRequest::_internal_email() const {
  return email_.Get();
}
inline void ModifyInfoRequest::_internal_set_email(const std::string& value) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ModifyInfoRequest::set_email(std::string&& value) {
  
  email_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ModifyInfoRequest.email)
}
inline void ModifyInfoRequest::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ModifyInfoRequest.email)
}
inline void ModifyInfoRequest::set_email(const char* value,
    size_t size) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ModifyInfoRequest.email)
}
inline std::string* ModifyInfoRequest::_internal_mutable_email() {
  
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ModifyInfoRequest::release_email() {
  // @@protoc_insertion_point(field_release:ModifyInfoRequest.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ModifyInfoRequest::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ModifyInfoRequest.email)
}

// int32 sex = 4;
inline void ModifyInfoRequest::clear_sex() {
  sex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ModifyInfoRequest::_internal_sex() const {
  return sex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ModifyInfoRequest::sex() const {
  // @@protoc_insertion_point(field_get:ModifyInfoRequest.sex)
  return _internal_sex();
}
inline void ModifyInfoRequest::_internal_set_sex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sex_ = value;
}
inline void ModifyInfoRequest::set_sex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sex(value);
  // @@protoc_insertion_point(field_set:ModifyInfoRequest.sex)
}

// -------------------------------------------------------------------

// VerifyRequest

// string user_id = 1;
inline void VerifyRequest::clear_user_id() {
  user_id_.ClearToEmpty();
}
inline const std::string& VerifyRequest::user_id() const {
  // @@protoc_insertion_point(field_get:VerifyRequest.user_id)
  return _internal_user_id();
}
inline void VerifyRequest::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:VerifyRequest.user_id)
}
inline std::string* VerifyRequest::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:VerifyRequest.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& VerifyRequest::_internal_user_id() const {
  return user_id_.Get();
}
inline void VerifyRequest::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void VerifyRequest::set_user_id(std::string&& value) {
  
  user_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:VerifyRequest.user_id)
}
inline void VerifyRequest::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:VerifyRequest.user_id)
}
inline void VerifyRequest::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:VerifyRequest.user_id)
}
inline std::string* VerifyRequest::_internal_mutable_user_id() {
  
  return user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* VerifyRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:VerifyRequest.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VerifyRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:VerifyRequest.user_id)
}

// int32 type = 2;
inline void VerifyRequest::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VerifyRequest::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VerifyRequest::type() const {
  // @@protoc_insertion_point(field_get:VerifyRequest.type)
  return _internal_type();
}
inline void VerifyRequest::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void VerifyRequest::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:VerifyRequest.type)
}

// .VerifyRequest.VerifyType vtype = 3;
inline void VerifyRequest::clear_vtype() {
  vtype_ = 0;
}
inline ::VerifyRequest_VerifyType VerifyRequest::_internal_vtype() const {
  return static_cast< ::VerifyRequest_VerifyType >(vtype_);
}
inline ::VerifyRequest_VerifyType VerifyRequest::vtype() const {
  // @@protoc_insertion_point(field_get:VerifyRequest.vtype)
  return _internal_vtype();
}
inline void VerifyRequest::_internal_set_vtype(::VerifyRequest_VerifyType value) {
  
  vtype_ = value;
}
inline void VerifyRequest::set_vtype(::VerifyRequest_VerifyType value) {
  _internal_set_vtype(value);
  // @@protoc_insertion_point(field_set:VerifyRequest.vtype)
}

// .UserInfoRespond user_info = 4;
inline bool VerifyRequest::_internal_has_user_info() const {
  return this != internal_default_instance() && user_info_ != nullptr;
}
inline bool VerifyRequest::has_user_info() const {
  return _internal_has_user_info();
}
inline void VerifyRequest::clear_user_info() {
  if (GetArena() == nullptr && user_info_ != nullptr) {
    delete user_info_;
  }
  user_info_ = nullptr;
}
inline const ::UserInfoRespond& VerifyRequest::_internal_user_info() const {
  const ::UserInfoRespond* p = user_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::UserInfoRespond&>(
      ::_UserInfoRespond_default_instance_);
}
inline const ::UserInfoRespond& VerifyRequest::user_info() const {
  // @@protoc_insertion_point(field_get:VerifyRequest.user_info)
  return _internal_user_info();
}
inline void VerifyRequest::unsafe_arena_set_allocated_user_info(
    ::UserInfoRespond* user_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_info_);
  }
  user_info_ = user_info;
  if (user_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:VerifyRequest.user_info)
}
inline ::UserInfoRespond* VerifyRequest::release_user_info() {
  
  ::UserInfoRespond* temp = user_info_;
  user_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::UserInfoRespond* VerifyRequest::unsafe_arena_release_user_info() {
  // @@protoc_insertion_point(field_release:VerifyRequest.user_info)
  
  ::UserInfoRespond* temp = user_info_;
  user_info_ = nullptr;
  return temp;
}
inline ::UserInfoRespond* VerifyRequest::_internal_mutable_user_info() {
  
  if (user_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::UserInfoRespond>(GetArena());
    user_info_ = p;
  }
  return user_info_;
}
inline ::UserInfoRespond* VerifyRequest::mutable_user_info() {
  // @@protoc_insertion_point(field_mutable:VerifyRequest.user_info)
  return _internal_mutable_user_info();
}
inline void VerifyRequest::set_allocated_user_info(::UserInfoRespond* user_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete user_info_;
  }
  if (user_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(user_info);
    if (message_arena != submessage_arena) {
      user_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_info, submessage_arena);
    }
    
  } else {
    
  }
  user_info_ = user_info;
  // @@protoc_insertion_point(field_set_allocated:VerifyRequest.user_info)
}

// -------------------------------------------------------------------

// UpdataImageRequest

// string url = 1;
inline void UpdataImageRequest::clear_url() {
  url_.ClearToEmpty();
}
inline const std::string& UpdataImageRequest::url() const {
  // @@protoc_insertion_point(field_get:UpdataImageRequest.url)
  return _internal_url();
}
inline void UpdataImageRequest::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:UpdataImageRequest.url)
}
inline std::string* UpdataImageRequest::mutable_url() {
  // @@protoc_insertion_point(field_mutable:UpdataImageRequest.url)
  return _internal_mutable_url();
}
inline const std::string& UpdataImageRequest::_internal_url() const {
  return url_.Get();
}
inline void UpdataImageRequest::_internal_set_url(const std::string& value) {
  
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdataImageRequest::set_url(std::string&& value) {
  
  url_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UpdataImageRequest.url)
}
inline void UpdataImageRequest::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:UpdataImageRequest.url)
}
inline void UpdataImageRequest::set_url(const char* value,
    size_t size) {
  
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UpdataImageRequest.url)
}
inline std::string* UpdataImageRequest::_internal_mutable_url() {
  
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdataImageRequest::release_url() {
  // @@protoc_insertion_point(field_release:UpdataImageRequest.url)
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdataImageRequest::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UpdataImageRequest.url)
}

// bytes data = 2;
inline void UpdataImageRequest::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& UpdataImageRequest::data() const {
  // @@protoc_insertion_point(field_get:UpdataImageRequest.data)
  return _internal_data();
}
inline void UpdataImageRequest::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:UpdataImageRequest.data)
}
inline std::string* UpdataImageRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable:UpdataImageRequest.data)
  return _internal_mutable_data();
}
inline const std::string& UpdataImageRequest::_internal_data() const {
  return data_.Get();
}
inline void UpdataImageRequest::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdataImageRequest::set_data(std::string&& value) {
  
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UpdataImageRequest.data)
}
inline void UpdataImageRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:UpdataImageRequest.data)
}
inline void UpdataImageRequest::set_data(const void* value,
    size_t size) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UpdataImageRequest.data)
}
inline std::string* UpdataImageRequest::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdataImageRequest::release_data() {
  // @@protoc_insertion_point(field_release:UpdataImageRequest.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdataImageRequest::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UpdataImageRequest.data)
}

// bytes dataHD = 3;
inline void UpdataImageRequest::clear_datahd() {
  datahd_.ClearToEmpty();
}
inline const std::string& UpdataImageRequest::datahd() const {
  // @@protoc_insertion_point(field_get:UpdataImageRequest.dataHD)
  return _internal_datahd();
}
inline void UpdataImageRequest::set_datahd(const std::string& value) {
  _internal_set_datahd(value);
  // @@protoc_insertion_point(field_set:UpdataImageRequest.dataHD)
}
inline std::string* UpdataImageRequest::mutable_datahd() {
  // @@protoc_insertion_point(field_mutable:UpdataImageRequest.dataHD)
  return _internal_mutable_datahd();
}
inline const std::string& UpdataImageRequest::_internal_datahd() const {
  return datahd_.Get();
}
inline void UpdataImageRequest::_internal_set_datahd(const std::string& value) {
  
  datahd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdataImageRequest::set_datahd(std::string&& value) {
  
  datahd_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UpdataImageRequest.dataHD)
}
inline void UpdataImageRequest::set_datahd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  datahd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:UpdataImageRequest.dataHD)
}
inline void UpdataImageRequest::set_datahd(const void* value,
    size_t size) {
  
  datahd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UpdataImageRequest.dataHD)
}
inline std::string* UpdataImageRequest::_internal_mutable_datahd() {
  
  return datahd_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdataImageRequest::release_datahd() {
  // @@protoc_insertion_point(field_release:UpdataImageRequest.dataHD)
  return datahd_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdataImageRequest::set_allocated_datahd(std::string* datahd) {
  if (datahd != nullptr) {
    
  } else {
    
  }
  datahd_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datahd,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UpdataImageRequest.dataHD)
}

// -------------------------------------------------------------------

// ImageRequest

// string url = 1;
inline void ImageRequest::clear_url() {
  url_.ClearToEmpty();
}
inline const std::string& ImageRequest::url() const {
  // @@protoc_insertion_point(field_get:ImageRequest.url)
  return _internal_url();
}
inline void ImageRequest::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:ImageRequest.url)
}
inline std::string* ImageRequest::mutable_url() {
  // @@protoc_insertion_point(field_mutable:ImageRequest.url)
  return _internal_mutable_url();
}
inline const std::string& ImageRequest::_internal_url() const {
  return url_.Get();
}
inline void ImageRequest::_internal_set_url(const std::string& value) {
  
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ImageRequest::set_url(std::string&& value) {
  
  url_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ImageRequest.url)
}
inline void ImageRequest::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ImageRequest.url)
}
inline void ImageRequest::set_url(const char* value,
    size_t size) {
  
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ImageRequest.url)
}
inline std::string* ImageRequest::_internal_mutable_url() {
  
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ImageRequest::release_url() {
  // @@protoc_insertion_point(field_release:ImageRequest.url)
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImageRequest::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ImageRequest.url)
}

// -------------------------------------------------------------------

// FriendRequest

// string user_id = 1;
inline void FriendRequest::clear_user_id() {
  user_id_.ClearToEmpty();
}
inline const std::string& FriendRequest::user_id() const {
  // @@protoc_insertion_point(field_get:FriendRequest.user_id)
  return _internal_user_id();
}
inline void FriendRequest::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:FriendRequest.user_id)
}
inline std::string* FriendRequest::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:FriendRequest.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& FriendRequest::_internal_user_id() const {
  return user_id_.Get();
}
inline void FriendRequest::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FriendRequest::set_user_id(std::string&& value) {
  
  user_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FriendRequest.user_id)
}
inline void FriendRequest::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FriendRequest.user_id)
}
inline void FriendRequest::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FriendRequest.user_id)
}
inline std::string* FriendRequest::_internal_mutable_user_id() {
  
  return user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FriendRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:FriendRequest.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FriendRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FriendRequest.user_id)
}

// -------------------------------------------------------------------

// DeleteFriendRequest

// string user_id = 1;
inline void DeleteFriendRequest::clear_user_id() {
  user_id_.ClearToEmpty();
}
inline const std::string& DeleteFriendRequest::user_id() const {
  // @@protoc_insertion_point(field_get:DeleteFriendRequest.user_id)
  return _internal_user_id();
}
inline void DeleteFriendRequest::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:DeleteFriendRequest.user_id)
}
inline std::string* DeleteFriendRequest::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:DeleteFriendRequest.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& DeleteFriendRequest::_internal_user_id() const {
  return user_id_.Get();
}
inline void DeleteFriendRequest::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteFriendRequest::set_user_id(std::string&& value) {
  
  user_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DeleteFriendRequest.user_id)
}
inline void DeleteFriendRequest::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:DeleteFriendRequest.user_id)
}
inline void DeleteFriendRequest::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DeleteFriendRequest.user_id)
}
inline std::string* DeleteFriendRequest::_internal_mutable_user_id() {
  
  return user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteFriendRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:DeleteFriendRequest.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteFriendRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DeleteFriendRequest.user_id)
}

// string target = 2;
inline void DeleteFriendRequest::clear_target() {
  target_.ClearToEmpty();
}
inline const std::string& DeleteFriendRequest::target() const {
  // @@protoc_insertion_point(field_get:DeleteFriendRequest.target)
  return _internal_target();
}
inline void DeleteFriendRequest::set_target(const std::string& value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:DeleteFriendRequest.target)
}
inline std::string* DeleteFriendRequest::mutable_target() {
  // @@protoc_insertion_point(field_mutable:DeleteFriendRequest.target)
  return _internal_mutable_target();
}
inline const std::string& DeleteFriendRequest::_internal_target() const {
  return target_.Get();
}
inline void DeleteFriendRequest::_internal_set_target(const std::string& value) {
  
  target_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteFriendRequest::set_target(std::string&& value) {
  
  target_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DeleteFriendRequest.target)
}
inline void DeleteFriendRequest::set_target(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:DeleteFriendRequest.target)
}
inline void DeleteFriendRequest::set_target(const char* value,
    size_t size) {
  
  target_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DeleteFriendRequest.target)
}
inline std::string* DeleteFriendRequest::_internal_mutable_target() {
  
  return target_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteFriendRequest::release_target() {
  // @@protoc_insertion_point(field_release:DeleteFriendRequest.target)
  return target_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteFriendRequest::set_allocated_target(std::string* target) {
  if (target != nullptr) {
    
  } else {
    
  }
  target_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DeleteFriendRequest.target)
}

// -------------------------------------------------------------------

// MessageRequest

// string target = 1;
inline void MessageRequest::clear_target() {
  target_.ClearToEmpty();
}
inline const std::string& MessageRequest::target() const {
  // @@protoc_insertion_point(field_get:MessageRequest.target)
  return _internal_target();
}
inline void MessageRequest::set_target(const std::string& value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:MessageRequest.target)
}
inline std::string* MessageRequest::mutable_target() {
  // @@protoc_insertion_point(field_mutable:MessageRequest.target)
  return _internal_mutable_target();
}
inline const std::string& MessageRequest::_internal_target() const {
  return target_.Get();
}
inline void MessageRequest::_internal_set_target(const std::string& value) {
  
  target_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MessageRequest::set_target(std::string&& value) {
  
  target_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MessageRequest.target)
}
inline void MessageRequest::set_target(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MessageRequest.target)
}
inline void MessageRequest::set_target(const char* value,
    size_t size) {
  
  target_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MessageRequest.target)
}
inline std::string* MessageRequest::_internal_mutable_target() {
  
  return target_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MessageRequest::release_target() {
  // @@protoc_insertion_point(field_release:MessageRequest.target)
  return target_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MessageRequest::set_allocated_target(std::string* target) {
  if (target != nullptr) {
    
  } else {
    
  }
  target_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MessageRequest.target)
}

// .MessageRequest.msgType type = 2;
inline void MessageRequest::clear_type() {
  type_ = 0;
}
inline ::MessageRequest_msgType MessageRequest::_internal_type() const {
  return static_cast< ::MessageRequest_msgType >(type_);
}
inline ::MessageRequest_msgType MessageRequest::type() const {
  // @@protoc_insertion_point(field_get:MessageRequest.type)
  return _internal_type();
}
inline void MessageRequest::_internal_set_type(::MessageRequest_msgType value) {
  
  type_ = value;
}
inline void MessageRequest::set_type(::MessageRequest_msgType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:MessageRequest.type)
}

// .TextMessage text_message = 3;
inline bool MessageRequest::_internal_has_text_message() const {
  return request_type_case() == kTextMessage;
}
inline bool MessageRequest::has_text_message() const {
  return _internal_has_text_message();
}
inline void MessageRequest::set_has_text_message() {
  _oneof_case_[0] = kTextMessage;
}
inline void MessageRequest::clear_text_message() {
  if (_internal_has_text_message()) {
    if (GetArena() == nullptr) {
      delete request_type_.text_message_;
    }
    clear_has_request_type();
  }
}
inline ::TextMessage* MessageRequest::release_text_message() {
  // @@protoc_insertion_point(field_release:MessageRequest.text_message)
  if (_internal_has_text_message()) {
    clear_has_request_type();
      ::TextMessage* temp = request_type_.text_message_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_type_.text_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TextMessage& MessageRequest::_internal_text_message() const {
  return _internal_has_text_message()
      ? *request_type_.text_message_
      : reinterpret_cast< ::TextMessage&>(::_TextMessage_default_instance_);
}
inline const ::TextMessage& MessageRequest::text_message() const {
  // @@protoc_insertion_point(field_get:MessageRequest.text_message)
  return _internal_text_message();
}
inline ::TextMessage* MessageRequest::unsafe_arena_release_text_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MessageRequest.text_message)
  if (_internal_has_text_message()) {
    clear_has_request_type();
    ::TextMessage* temp = request_type_.text_message_;
    request_type_.text_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MessageRequest::unsafe_arena_set_allocated_text_message(::TextMessage* text_message) {
  clear_request_type();
  if (text_message) {
    set_has_text_message();
    request_type_.text_message_ = text_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MessageRequest.text_message)
}
inline ::TextMessage* MessageRequest::_internal_mutable_text_message() {
  if (!_internal_has_text_message()) {
    clear_request_type();
    set_has_text_message();
    request_type_.text_message_ = CreateMaybeMessage< ::TextMessage >(GetArena());
  }
  return request_type_.text_message_;
}
inline ::TextMessage* MessageRequest::mutable_text_message() {
  // @@protoc_insertion_point(field_mutable:MessageRequest.text_message)
  return _internal_mutable_text_message();
}

// .ImageMessage image_message = 4;
inline bool MessageRequest::_internal_has_image_message() const {
  return request_type_case() == kImageMessage;
}
inline bool MessageRequest::has_image_message() const {
  return _internal_has_image_message();
}
inline void MessageRequest::set_has_image_message() {
  _oneof_case_[0] = kImageMessage;
}
inline void MessageRequest::clear_image_message() {
  if (_internal_has_image_message()) {
    if (GetArena() == nullptr) {
      delete request_type_.image_message_;
    }
    clear_has_request_type();
  }
}
inline ::ImageMessage* MessageRequest::release_image_message() {
  // @@protoc_insertion_point(field_release:MessageRequest.image_message)
  if (_internal_has_image_message()) {
    clear_has_request_type();
      ::ImageMessage* temp = request_type_.image_message_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_type_.image_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ImageMessage& MessageRequest::_internal_image_message() const {
  return _internal_has_image_message()
      ? *request_type_.image_message_
      : reinterpret_cast< ::ImageMessage&>(::_ImageMessage_default_instance_);
}
inline const ::ImageMessage& MessageRequest::image_message() const {
  // @@protoc_insertion_point(field_get:MessageRequest.image_message)
  return _internal_image_message();
}
inline ::ImageMessage* MessageRequest::unsafe_arena_release_image_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MessageRequest.image_message)
  if (_internal_has_image_message()) {
    clear_has_request_type();
    ::ImageMessage* temp = request_type_.image_message_;
    request_type_.image_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MessageRequest::unsafe_arena_set_allocated_image_message(::ImageMessage* image_message) {
  clear_request_type();
  if (image_message) {
    set_has_image_message();
    request_type_.image_message_ = image_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MessageRequest.image_message)
}
inline ::ImageMessage* MessageRequest::_internal_mutable_image_message() {
  if (!_internal_has_image_message()) {
    clear_request_type();
    set_has_image_message();
    request_type_.image_message_ = CreateMaybeMessage< ::ImageMessage >(GetArena());
  }
  return request_type_.image_message_;
}
inline ::ImageMessage* MessageRequest::mutable_image_message() {
  // @@protoc_insertion_point(field_mutable:MessageRequest.image_message)
  return _internal_mutable_image_message();
}

inline bool MessageRequest::has_request_type() const {
  return request_type_case() != REQUEST_TYPE_NOT_SET;
}
inline void MessageRequest::clear_has_request_type() {
  _oneof_case_[0] = REQUEST_TYPE_NOT_SET;
}
inline MessageRequest::RequestTypeCase MessageRequest::request_type_case() const {
  return MessageRequest::RequestTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TextMessage

// bytes content = 1;
inline void TextMessage::clear_content() {
  content_.ClearToEmpty();
}
inline const std::string& TextMessage::content() const {
  // @@protoc_insertion_point(field_get:TextMessage.content)
  return _internal_content();
}
inline void TextMessage::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:TextMessage.content)
}
inline std::string* TextMessage::mutable_content() {
  // @@protoc_insertion_point(field_mutable:TextMessage.content)
  return _internal_mutable_content();
}
inline const std::string& TextMessage::_internal_content() const {
  return content_.Get();
}
inline void TextMessage::_internal_set_content(const std::string& value) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TextMessage::set_content(std::string&& value) {
  
  content_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TextMessage.content)
}
inline void TextMessage::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TextMessage.content)
}
inline void TextMessage::set_content(const void* value,
    size_t size) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TextMessage.content)
}
inline std::string* TextMessage::_internal_mutable_content() {
  
  return content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TextMessage::release_content() {
  // @@protoc_insertion_point(field_release:TextMessage.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TextMessage::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TextMessage.content)
}

// bytes mention = 2;
inline void TextMessage::clear_mention() {
  mention_.ClearToEmpty();
}
inline const std::string& TextMessage::mention() const {
  // @@protoc_insertion_point(field_get:TextMessage.mention)
  return _internal_mention();
}
inline void TextMessage::set_mention(const std::string& value) {
  _internal_set_mention(value);
  // @@protoc_insertion_point(field_set:TextMessage.mention)
}
inline std::string* TextMessage::mutable_mention() {
  // @@protoc_insertion_point(field_mutable:TextMessage.mention)
  return _internal_mutable_mention();
}
inline const std::string& TextMessage::_internal_mention() const {
  return mention_.Get();
}
inline void TextMessage::_internal_set_mention(const std::string& value) {
  
  mention_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TextMessage::set_mention(std::string&& value) {
  
  mention_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TextMessage.mention)
}
inline void TextMessage::set_mention(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mention_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TextMessage.mention)
}
inline void TextMessage::set_mention(const void* value,
    size_t size) {
  
  mention_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TextMessage.mention)
}
inline std::string* TextMessage::_internal_mutable_mention() {
  
  return mention_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TextMessage::release_mention() {
  // @@protoc_insertion_point(field_release:TextMessage.mention)
  return mention_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TextMessage::set_allocated_mention(std::string* mention) {
  if (mention != nullptr) {
    
  } else {
    
  }
  mention_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mention,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TextMessage.mention)
}

// -------------------------------------------------------------------

// ImageMessage

// string md5 = 1;
inline void ImageMessage::clear_md5() {
  md5_.ClearToEmpty();
}
inline const std::string& ImageMessage::md5() const {
  // @@protoc_insertion_point(field_get:ImageMessage.md5)
  return _internal_md5();
}
inline void ImageMessage::set_md5(const std::string& value) {
  _internal_set_md5(value);
  // @@protoc_insertion_point(field_set:ImageMessage.md5)
}
inline std::string* ImageMessage::mutable_md5() {
  // @@protoc_insertion_point(field_mutable:ImageMessage.md5)
  return _internal_mutable_md5();
}
inline const std::string& ImageMessage::_internal_md5() const {
  return md5_.Get();
}
inline void ImageMessage::_internal_set_md5(const std::string& value) {
  
  md5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ImageMessage::set_md5(std::string&& value) {
  
  md5_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ImageMessage.md5)
}
inline void ImageMessage::set_md5(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  md5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ImageMessage.md5)
}
inline void ImageMessage::set_md5(const char* value,
    size_t size) {
  
  md5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ImageMessage.md5)
}
inline std::string* ImageMessage::_internal_mutable_md5() {
  
  return md5_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ImageMessage::release_md5() {
  // @@protoc_insertion_point(field_release:ImageMessage.md5)
  return md5_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImageMessage::set_allocated_md5(std::string* md5) {
  if (md5 != nullptr) {
    
  } else {
    
  }
  md5_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), md5,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ImageMessage.md5)
}

// bytes data = 2;
inline void ImageMessage::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& ImageMessage::data() const {
  // @@protoc_insertion_point(field_get:ImageMessage.data)
  return _internal_data();
}
inline void ImageMessage::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:ImageMessage.data)
}
inline std::string* ImageMessage::mutable_data() {
  // @@protoc_insertion_point(field_mutable:ImageMessage.data)
  return _internal_mutable_data();
}
inline const std::string& ImageMessage::_internal_data() const {
  return data_.Get();
}
inline void ImageMessage::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ImageMessage::set_data(std::string&& value) {
  
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ImageMessage.data)
}
inline void ImageMessage::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ImageMessage.data)
}
inline void ImageMessage::set_data(const void* value,
    size_t size) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ImageMessage.data)
}
inline std::string* ImageMessage::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ImageMessage::release_data() {
  // @@protoc_insertion_point(field_release:ImageMessage.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImageMessage::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ImageMessage.data)
}

// bytes dataHD = 3;
inline void ImageMessage::clear_datahd() {
  datahd_.ClearToEmpty();
}
inline const std::string& ImageMessage::datahd() const {
  // @@protoc_insertion_point(field_get:ImageMessage.dataHD)
  return _internal_datahd();
}
inline void ImageMessage::set_datahd(const std::string& value) {
  _internal_set_datahd(value);
  // @@protoc_insertion_point(field_set:ImageMessage.dataHD)
}
inline std::string* ImageMessage::mutable_datahd() {
  // @@protoc_insertion_point(field_mutable:ImageMessage.dataHD)
  return _internal_mutable_datahd();
}
inline const std::string& ImageMessage::_internal_datahd() const {
  return datahd_.Get();
}
inline void ImageMessage::_internal_set_datahd(const std::string& value) {
  
  datahd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ImageMessage::set_datahd(std::string&& value) {
  
  datahd_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ImageMessage.dataHD)
}
inline void ImageMessage::set_datahd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  datahd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ImageMessage.dataHD)
}
inline void ImageMessage::set_datahd(const void* value,
    size_t size) {
  
  datahd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ImageMessage.dataHD)
}
inline std::string* ImageMessage::_internal_mutable_datahd() {
  
  return datahd_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ImageMessage::release_datahd() {
  // @@protoc_insertion_point(field_release:ImageMessage.dataHD)
  return datahd_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImageMessage::set_allocated_datahd(std::string* datahd) {
  if (datahd != nullptr) {
    
  } else {
    
  }
  datahd_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datahd,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ImageMessage.dataHD)
}

// bytes content = 4;
inline void ImageMessage::clear_content() {
  content_.ClearToEmpty();
}
inline const std::string& ImageMessage::content() const {
  // @@protoc_insertion_point(field_get:ImageMessage.content)
  return _internal_content();
}
inline void ImageMessage::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:ImageMessage.content)
}
inline std::string* ImageMessage::mutable_content() {
  // @@protoc_insertion_point(field_mutable:ImageMessage.content)
  return _internal_mutable_content();
}
inline const std::string& ImageMessage::_internal_content() const {
  return content_.Get();
}
inline void ImageMessage::_internal_set_content(const std::string& value) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ImageMessage::set_content(std::string&& value) {
  
  content_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ImageMessage.content)
}
inline void ImageMessage::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ImageMessage.content)
}
inline void ImageMessage::set_content(const void* value,
    size_t size) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ImageMessage.content)
}
inline std::string* ImageMessage::_internal_mutable_content() {
  
  return content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ImageMessage::release_content() {
  // @@protoc_insertion_point(field_release:ImageMessage.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImageMessage::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ImageMessage.content)
}

// -------------------------------------------------------------------

// PullRequest

// .LoginRequest login_request = 1;
inline bool PullRequest::_internal_has_login_request() const {
  return request_type_case() == kLoginRequest;
}
inline bool PullRequest::has_login_request() const {
  return _internal_has_login_request();
}
inline void PullRequest::set_has_login_request() {
  _oneof_case_[0] = kLoginRequest;
}
inline void PullRequest::clear_login_request() {
  if (_internal_has_login_request()) {
    if (GetArena() == nullptr) {
      delete request_type_.login_request_;
    }
    clear_has_request_type();
  }
}
inline ::LoginRequest* PullRequest::release_login_request() {
  // @@protoc_insertion_point(field_release:PullRequest.login_request)
  if (_internal_has_login_request()) {
    clear_has_request_type();
      ::LoginRequest* temp = request_type_.login_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_type_.login_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::LoginRequest& PullRequest::_internal_login_request() const {
  return _internal_has_login_request()
      ? *request_type_.login_request_
      : reinterpret_cast< ::LoginRequest&>(::_LoginRequest_default_instance_);
}
inline const ::LoginRequest& PullRequest::login_request() const {
  // @@protoc_insertion_point(field_get:PullRequest.login_request)
  return _internal_login_request();
}
inline ::LoginRequest* PullRequest::unsafe_arena_release_login_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PullRequest.login_request)
  if (_internal_has_login_request()) {
    clear_has_request_type();
    ::LoginRequest* temp = request_type_.login_request_;
    request_type_.login_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PullRequest::unsafe_arena_set_allocated_login_request(::LoginRequest* login_request) {
  clear_request_type();
  if (login_request) {
    set_has_login_request();
    request_type_.login_request_ = login_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PullRequest.login_request)
}
inline ::LoginRequest* PullRequest::_internal_mutable_login_request() {
  if (!_internal_has_login_request()) {
    clear_request_type();
    set_has_login_request();
    request_type_.login_request_ = CreateMaybeMessage< ::LoginRequest >(GetArena());
  }
  return request_type_.login_request_;
}
inline ::LoginRequest* PullRequest::mutable_login_request() {
  // @@protoc_insertion_point(field_mutable:PullRequest.login_request)
  return _internal_mutable_login_request();
}

// .RegisterRequest register_request = 2;
inline bool PullRequest::_internal_has_register_request() const {
  return request_type_case() == kRegisterRequest;
}
inline bool PullRequest::has_register_request() const {
  return _internal_has_register_request();
}
inline void PullRequest::set_has_register_request() {
  _oneof_case_[0] = kRegisterRequest;
}
inline void PullRequest::clear_register_request() {
  if (_internal_has_register_request()) {
    if (GetArena() == nullptr) {
      delete request_type_.register_request_;
    }
    clear_has_request_type();
  }
}
inline ::RegisterRequest* PullRequest::release_register_request() {
  // @@protoc_insertion_point(field_release:PullRequest.register_request)
  if (_internal_has_register_request()) {
    clear_has_request_type();
      ::RegisterRequest* temp = request_type_.register_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_type_.register_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::RegisterRequest& PullRequest::_internal_register_request() const {
  return _internal_has_register_request()
      ? *request_type_.register_request_
      : reinterpret_cast< ::RegisterRequest&>(::_RegisterRequest_default_instance_);
}
inline const ::RegisterRequest& PullRequest::register_request() const {
  // @@protoc_insertion_point(field_get:PullRequest.register_request)
  return _internal_register_request();
}
inline ::RegisterRequest* PullRequest::unsafe_arena_release_register_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PullRequest.register_request)
  if (_internal_has_register_request()) {
    clear_has_request_type();
    ::RegisterRequest* temp = request_type_.register_request_;
    request_type_.register_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PullRequest::unsafe_arena_set_allocated_register_request(::RegisterRequest* register_request) {
  clear_request_type();
  if (register_request) {
    set_has_register_request();
    request_type_.register_request_ = register_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PullRequest.register_request)
}
inline ::RegisterRequest* PullRequest::_internal_mutable_register_request() {
  if (!_internal_has_register_request()) {
    clear_request_type();
    set_has_register_request();
    request_type_.register_request_ = CreateMaybeMessage< ::RegisterRequest >(GetArena());
  }
  return request_type_.register_request_;
}
inline ::RegisterRequest* PullRequest::mutable_register_request() {
  // @@protoc_insertion_point(field_mutable:PullRequest.register_request)
  return _internal_mutable_register_request();
}

// .UserInfoRequest user_info = 3;
inline bool PullRequest::_internal_has_user_info() const {
  return request_type_case() == kUserInfo;
}
inline bool PullRequest::has_user_info() const {
  return _internal_has_user_info();
}
inline void PullRequest::set_has_user_info() {
  _oneof_case_[0] = kUserInfo;
}
inline void PullRequest::clear_user_info() {
  if (_internal_has_user_info()) {
    if (GetArena() == nullptr) {
      delete request_type_.user_info_;
    }
    clear_has_request_type();
  }
}
inline ::UserInfoRequest* PullRequest::release_user_info() {
  // @@protoc_insertion_point(field_release:PullRequest.user_info)
  if (_internal_has_user_info()) {
    clear_has_request_type();
      ::UserInfoRequest* temp = request_type_.user_info_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_type_.user_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::UserInfoRequest& PullRequest::_internal_user_info() const {
  return _internal_has_user_info()
      ? *request_type_.user_info_
      : reinterpret_cast< ::UserInfoRequest&>(::_UserInfoRequest_default_instance_);
}
inline const ::UserInfoRequest& PullRequest::user_info() const {
  // @@protoc_insertion_point(field_get:PullRequest.user_info)
  return _internal_user_info();
}
inline ::UserInfoRequest* PullRequest::unsafe_arena_release_user_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PullRequest.user_info)
  if (_internal_has_user_info()) {
    clear_has_request_type();
    ::UserInfoRequest* temp = request_type_.user_info_;
    request_type_.user_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PullRequest::unsafe_arena_set_allocated_user_info(::UserInfoRequest* user_info) {
  clear_request_type();
  if (user_info) {
    set_has_user_info();
    request_type_.user_info_ = user_info;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PullRequest.user_info)
}
inline ::UserInfoRequest* PullRequest::_internal_mutable_user_info() {
  if (!_internal_has_user_info()) {
    clear_request_type();
    set_has_user_info();
    request_type_.user_info_ = CreateMaybeMessage< ::UserInfoRequest >(GetArena());
  }
  return request_type_.user_info_;
}
inline ::UserInfoRequest* PullRequest::mutable_user_info() {
  // @@protoc_insertion_point(field_mutable:PullRequest.user_info)
  return _internal_mutable_user_info();
}

// .SearchRequest search_request = 4;
inline bool PullRequest::_internal_has_search_request() const {
  return request_type_case() == kSearchRequest;
}
inline bool PullRequest::has_search_request() const {
  return _internal_has_search_request();
}
inline void PullRequest::set_has_search_request() {
  _oneof_case_[0] = kSearchRequest;
}
inline void PullRequest::clear_search_request() {
  if (_internal_has_search_request()) {
    if (GetArena() == nullptr) {
      delete request_type_.search_request_;
    }
    clear_has_request_type();
  }
}
inline ::SearchRequest* PullRequest::release_search_request() {
  // @@protoc_insertion_point(field_release:PullRequest.search_request)
  if (_internal_has_search_request()) {
    clear_has_request_type();
      ::SearchRequest* temp = request_type_.search_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_type_.search_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::SearchRequest& PullRequest::_internal_search_request() const {
  return _internal_has_search_request()
      ? *request_type_.search_request_
      : reinterpret_cast< ::SearchRequest&>(::_SearchRequest_default_instance_);
}
inline const ::SearchRequest& PullRequest::search_request() const {
  // @@protoc_insertion_point(field_get:PullRequest.search_request)
  return _internal_search_request();
}
inline ::SearchRequest* PullRequest::unsafe_arena_release_search_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PullRequest.search_request)
  if (_internal_has_search_request()) {
    clear_has_request_type();
    ::SearchRequest* temp = request_type_.search_request_;
    request_type_.search_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PullRequest::unsafe_arena_set_allocated_search_request(::SearchRequest* search_request) {
  clear_request_type();
  if (search_request) {
    set_has_search_request();
    request_type_.search_request_ = search_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PullRequest.search_request)
}
inline ::SearchRequest* PullRequest::_internal_mutable_search_request() {
  if (!_internal_has_search_request()) {
    clear_request_type();
    set_has_search_request();
    request_type_.search_request_ = CreateMaybeMessage< ::SearchRequest >(GetArena());
  }
  return request_type_.search_request_;
}
inline ::SearchRequest* PullRequest::mutable_search_request() {
  // @@protoc_insertion_point(field_mutable:PullRequest.search_request)
  return _internal_mutable_search_request();
}

// .AddRequest add_request = 5;
inline bool PullRequest::_internal_has_add_request() const {
  return request_type_case() == kAddRequest;
}
inline bool PullRequest::has_add_request() const {
  return _internal_has_add_request();
}
inline void PullRequest::set_has_add_request() {
  _oneof_case_[0] = kAddRequest;
}
inline void PullRequest::clear_add_request() {
  if (_internal_has_add_request()) {
    if (GetArena() == nullptr) {
      delete request_type_.add_request_;
    }
    clear_has_request_type();
  }
}
inline ::AddRequest* PullRequest::release_add_request() {
  // @@protoc_insertion_point(field_release:PullRequest.add_request)
  if (_internal_has_add_request()) {
    clear_has_request_type();
      ::AddRequest* temp = request_type_.add_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_type_.add_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::AddRequest& PullRequest::_internal_add_request() const {
  return _internal_has_add_request()
      ? *request_type_.add_request_
      : reinterpret_cast< ::AddRequest&>(::_AddRequest_default_instance_);
}
inline const ::AddRequest& PullRequest::add_request() const {
  // @@protoc_insertion_point(field_get:PullRequest.add_request)
  return _internal_add_request();
}
inline ::AddRequest* PullRequest::unsafe_arena_release_add_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PullRequest.add_request)
  if (_internal_has_add_request()) {
    clear_has_request_type();
    ::AddRequest* temp = request_type_.add_request_;
    request_type_.add_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PullRequest::unsafe_arena_set_allocated_add_request(::AddRequest* add_request) {
  clear_request_type();
  if (add_request) {
    set_has_add_request();
    request_type_.add_request_ = add_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PullRequest.add_request)
}
inline ::AddRequest* PullRequest::_internal_mutable_add_request() {
  if (!_internal_has_add_request()) {
    clear_request_type();
    set_has_add_request();
    request_type_.add_request_ = CreateMaybeMessage< ::AddRequest >(GetArena());
  }
  return request_type_.add_request_;
}
inline ::AddRequest* PullRequest::mutable_add_request() {
  // @@protoc_insertion_point(field_mutable:PullRequest.add_request)
  return _internal_mutable_add_request();
}

// .ModifyInfoRequest modify_request = 6;
inline bool PullRequest::_internal_has_modify_request() const {
  return request_type_case() == kModifyRequest;
}
inline bool PullRequest::has_modify_request() const {
  return _internal_has_modify_request();
}
inline void PullRequest::set_has_modify_request() {
  _oneof_case_[0] = kModifyRequest;
}
inline void PullRequest::clear_modify_request() {
  if (_internal_has_modify_request()) {
    if (GetArena() == nullptr) {
      delete request_type_.modify_request_;
    }
    clear_has_request_type();
  }
}
inline ::ModifyInfoRequest* PullRequest::release_modify_request() {
  // @@protoc_insertion_point(field_release:PullRequest.modify_request)
  if (_internal_has_modify_request()) {
    clear_has_request_type();
      ::ModifyInfoRequest* temp = request_type_.modify_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_type_.modify_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ModifyInfoRequest& PullRequest::_internal_modify_request() const {
  return _internal_has_modify_request()
      ? *request_type_.modify_request_
      : reinterpret_cast< ::ModifyInfoRequest&>(::_ModifyInfoRequest_default_instance_);
}
inline const ::ModifyInfoRequest& PullRequest::modify_request() const {
  // @@protoc_insertion_point(field_get:PullRequest.modify_request)
  return _internal_modify_request();
}
inline ::ModifyInfoRequest* PullRequest::unsafe_arena_release_modify_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PullRequest.modify_request)
  if (_internal_has_modify_request()) {
    clear_has_request_type();
    ::ModifyInfoRequest* temp = request_type_.modify_request_;
    request_type_.modify_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PullRequest::unsafe_arena_set_allocated_modify_request(::ModifyInfoRequest* modify_request) {
  clear_request_type();
  if (modify_request) {
    set_has_modify_request();
    request_type_.modify_request_ = modify_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PullRequest.modify_request)
}
inline ::ModifyInfoRequest* PullRequest::_internal_mutable_modify_request() {
  if (!_internal_has_modify_request()) {
    clear_request_type();
    set_has_modify_request();
    request_type_.modify_request_ = CreateMaybeMessage< ::ModifyInfoRequest >(GetArena());
  }
  return request_type_.modify_request_;
}
inline ::ModifyInfoRequest* PullRequest::mutable_modify_request() {
  // @@protoc_insertion_point(field_mutable:PullRequest.modify_request)
  return _internal_mutable_modify_request();
}

// .VerifyRequest verify_request = 7;
inline bool PullRequest::_internal_has_verify_request() const {
  return request_type_case() == kVerifyRequest;
}
inline bool PullRequest::has_verify_request() const {
  return _internal_has_verify_request();
}
inline void PullRequest::set_has_verify_request() {
  _oneof_case_[0] = kVerifyRequest;
}
inline void PullRequest::clear_verify_request() {
  if (_internal_has_verify_request()) {
    if (GetArena() == nullptr) {
      delete request_type_.verify_request_;
    }
    clear_has_request_type();
  }
}
inline ::VerifyRequest* PullRequest::release_verify_request() {
  // @@protoc_insertion_point(field_release:PullRequest.verify_request)
  if (_internal_has_verify_request()) {
    clear_has_request_type();
      ::VerifyRequest* temp = request_type_.verify_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_type_.verify_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::VerifyRequest& PullRequest::_internal_verify_request() const {
  return _internal_has_verify_request()
      ? *request_type_.verify_request_
      : reinterpret_cast< ::VerifyRequest&>(::_VerifyRequest_default_instance_);
}
inline const ::VerifyRequest& PullRequest::verify_request() const {
  // @@protoc_insertion_point(field_get:PullRequest.verify_request)
  return _internal_verify_request();
}
inline ::VerifyRequest* PullRequest::unsafe_arena_release_verify_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PullRequest.verify_request)
  if (_internal_has_verify_request()) {
    clear_has_request_type();
    ::VerifyRequest* temp = request_type_.verify_request_;
    request_type_.verify_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PullRequest::unsafe_arena_set_allocated_verify_request(::VerifyRequest* verify_request) {
  clear_request_type();
  if (verify_request) {
    set_has_verify_request();
    request_type_.verify_request_ = verify_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PullRequest.verify_request)
}
inline ::VerifyRequest* PullRequest::_internal_mutable_verify_request() {
  if (!_internal_has_verify_request()) {
    clear_request_type();
    set_has_verify_request();
    request_type_.verify_request_ = CreateMaybeMessage< ::VerifyRequest >(GetArena());
  }
  return request_type_.verify_request_;
}
inline ::VerifyRequest* PullRequest::mutable_verify_request() {
  // @@protoc_insertion_point(field_mutable:PullRequest.verify_request)
  return _internal_mutable_verify_request();
}

// .UpdataImageRequest update_image = 8;
inline bool PullRequest::_internal_has_update_image() const {
  return request_type_case() == kUpdateImage;
}
inline bool PullRequest::has_update_image() const {
  return _internal_has_update_image();
}
inline void PullRequest::set_has_update_image() {
  _oneof_case_[0] = kUpdateImage;
}
inline void PullRequest::clear_update_image() {
  if (_internal_has_update_image()) {
    if (GetArena() == nullptr) {
      delete request_type_.update_image_;
    }
    clear_has_request_type();
  }
}
inline ::UpdataImageRequest* PullRequest::release_update_image() {
  // @@protoc_insertion_point(field_release:PullRequest.update_image)
  if (_internal_has_update_image()) {
    clear_has_request_type();
      ::UpdataImageRequest* temp = request_type_.update_image_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_type_.update_image_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::UpdataImageRequest& PullRequest::_internal_update_image() const {
  return _internal_has_update_image()
      ? *request_type_.update_image_
      : reinterpret_cast< ::UpdataImageRequest&>(::_UpdataImageRequest_default_instance_);
}
inline const ::UpdataImageRequest& PullRequest::update_image() const {
  // @@protoc_insertion_point(field_get:PullRequest.update_image)
  return _internal_update_image();
}
inline ::UpdataImageRequest* PullRequest::unsafe_arena_release_update_image() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PullRequest.update_image)
  if (_internal_has_update_image()) {
    clear_has_request_type();
    ::UpdataImageRequest* temp = request_type_.update_image_;
    request_type_.update_image_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PullRequest::unsafe_arena_set_allocated_update_image(::UpdataImageRequest* update_image) {
  clear_request_type();
  if (update_image) {
    set_has_update_image();
    request_type_.update_image_ = update_image;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PullRequest.update_image)
}
inline ::UpdataImageRequest* PullRequest::_internal_mutable_update_image() {
  if (!_internal_has_update_image()) {
    clear_request_type();
    set_has_update_image();
    request_type_.update_image_ = CreateMaybeMessage< ::UpdataImageRequest >(GetArena());
  }
  return request_type_.update_image_;
}
inline ::UpdataImageRequest* PullRequest::mutable_update_image() {
  // @@protoc_insertion_point(field_mutable:PullRequest.update_image)
  return _internal_mutable_update_image();
}

// .ImageRequest image_request = 9;
inline bool PullRequest::_internal_has_image_request() const {
  return request_type_case() == kImageRequest;
}
inline bool PullRequest::has_image_request() const {
  return _internal_has_image_request();
}
inline void PullRequest::set_has_image_request() {
  _oneof_case_[0] = kImageRequest;
}
inline void PullRequest::clear_image_request() {
  if (_internal_has_image_request()) {
    if (GetArena() == nullptr) {
      delete request_type_.image_request_;
    }
    clear_has_request_type();
  }
}
inline ::ImageRequest* PullRequest::release_image_request() {
  // @@protoc_insertion_point(field_release:PullRequest.image_request)
  if (_internal_has_image_request()) {
    clear_has_request_type();
      ::ImageRequest* temp = request_type_.image_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_type_.image_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ImageRequest& PullRequest::_internal_image_request() const {
  return _internal_has_image_request()
      ? *request_type_.image_request_
      : reinterpret_cast< ::ImageRequest&>(::_ImageRequest_default_instance_);
}
inline const ::ImageRequest& PullRequest::image_request() const {
  // @@protoc_insertion_point(field_get:PullRequest.image_request)
  return _internal_image_request();
}
inline ::ImageRequest* PullRequest::unsafe_arena_release_image_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PullRequest.image_request)
  if (_internal_has_image_request()) {
    clear_has_request_type();
    ::ImageRequest* temp = request_type_.image_request_;
    request_type_.image_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PullRequest::unsafe_arena_set_allocated_image_request(::ImageRequest* image_request) {
  clear_request_type();
  if (image_request) {
    set_has_image_request();
    request_type_.image_request_ = image_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PullRequest.image_request)
}
inline ::ImageRequest* PullRequest::_internal_mutable_image_request() {
  if (!_internal_has_image_request()) {
    clear_request_type();
    set_has_image_request();
    request_type_.image_request_ = CreateMaybeMessage< ::ImageRequest >(GetArena());
  }
  return request_type_.image_request_;
}
inline ::ImageRequest* PullRequest::mutable_image_request() {
  // @@protoc_insertion_point(field_mutable:PullRequest.image_request)
  return _internal_mutable_image_request();
}

// .FriendRequest friend_request = 10;
inline bool PullRequest::_internal_has_friend_request() const {
  return request_type_case() == kFriendRequest;
}
inline bool PullRequest::has_friend_request() const {
  return _internal_has_friend_request();
}
inline void PullRequest::set_has_friend_request() {
  _oneof_case_[0] = kFriendRequest;
}
inline void PullRequest::clear_friend_request() {
  if (_internal_has_friend_request()) {
    if (GetArena() == nullptr) {
      delete request_type_.friend_request_;
    }
    clear_has_request_type();
  }
}
inline ::FriendRequest* PullRequest::release_friend_request() {
  // @@protoc_insertion_point(field_release:PullRequest.friend_request)
  if (_internal_has_friend_request()) {
    clear_has_request_type();
      ::FriendRequest* temp = request_type_.friend_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_type_.friend_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::FriendRequest& PullRequest::_internal_friend_request() const {
  return _internal_has_friend_request()
      ? *request_type_.friend_request_
      : reinterpret_cast< ::FriendRequest&>(::_FriendRequest_default_instance_);
}
inline const ::FriendRequest& PullRequest::friend_request() const {
  // @@protoc_insertion_point(field_get:PullRequest.friend_request)
  return _internal_friend_request();
}
inline ::FriendRequest* PullRequest::unsafe_arena_release_friend_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PullRequest.friend_request)
  if (_internal_has_friend_request()) {
    clear_has_request_type();
    ::FriendRequest* temp = request_type_.friend_request_;
    request_type_.friend_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PullRequest::unsafe_arena_set_allocated_friend_request(::FriendRequest* friend_request) {
  clear_request_type();
  if (friend_request) {
    set_has_friend_request();
    request_type_.friend_request_ = friend_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PullRequest.friend_request)
}
inline ::FriendRequest* PullRequest::_internal_mutable_friend_request() {
  if (!_internal_has_friend_request()) {
    clear_request_type();
    set_has_friend_request();
    request_type_.friend_request_ = CreateMaybeMessage< ::FriendRequest >(GetArena());
  }
  return request_type_.friend_request_;
}
inline ::FriendRequest* PullRequest::mutable_friend_request() {
  // @@protoc_insertion_point(field_mutable:PullRequest.friend_request)
  return _internal_mutable_friend_request();
}

// .DeleteFriendRequest delete_request = 11;
inline bool PullRequest::_internal_has_delete_request() const {
  return request_type_case() == kDeleteRequest;
}
inline bool PullRequest::has_delete_request() const {
  return _internal_has_delete_request();
}
inline void PullRequest::set_has_delete_request() {
  _oneof_case_[0] = kDeleteRequest;
}
inline void PullRequest::clear_delete_request() {
  if (_internal_has_delete_request()) {
    if (GetArena() == nullptr) {
      delete request_type_.delete_request_;
    }
    clear_has_request_type();
  }
}
inline ::DeleteFriendRequest* PullRequest::release_delete_request() {
  // @@protoc_insertion_point(field_release:PullRequest.delete_request)
  if (_internal_has_delete_request()) {
    clear_has_request_type();
      ::DeleteFriendRequest* temp = request_type_.delete_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_type_.delete_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DeleteFriendRequest& PullRequest::_internal_delete_request() const {
  return _internal_has_delete_request()
      ? *request_type_.delete_request_
      : reinterpret_cast< ::DeleteFriendRequest&>(::_DeleteFriendRequest_default_instance_);
}
inline const ::DeleteFriendRequest& PullRequest::delete_request() const {
  // @@protoc_insertion_point(field_get:PullRequest.delete_request)
  return _internal_delete_request();
}
inline ::DeleteFriendRequest* PullRequest::unsafe_arena_release_delete_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PullRequest.delete_request)
  if (_internal_has_delete_request()) {
    clear_has_request_type();
    ::DeleteFriendRequest* temp = request_type_.delete_request_;
    request_type_.delete_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PullRequest::unsafe_arena_set_allocated_delete_request(::DeleteFriendRequest* delete_request) {
  clear_request_type();
  if (delete_request) {
    set_has_delete_request();
    request_type_.delete_request_ = delete_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PullRequest.delete_request)
}
inline ::DeleteFriendRequest* PullRequest::_internal_mutable_delete_request() {
  if (!_internal_has_delete_request()) {
    clear_request_type();
    set_has_delete_request();
    request_type_.delete_request_ = CreateMaybeMessage< ::DeleteFriendRequest >(GetArena());
  }
  return request_type_.delete_request_;
}
inline ::DeleteFriendRequest* PullRequest::mutable_delete_request() {
  // @@protoc_insertion_point(field_mutable:PullRequest.delete_request)
  return _internal_mutable_delete_request();
}

// .MessageRequest message_request = 12;
inline bool PullRequest::_internal_has_message_request() const {
  return request_type_case() == kMessageRequest;
}
inline bool PullRequest::has_message_request() const {
  return _internal_has_message_request();
}
inline void PullRequest::set_has_message_request() {
  _oneof_case_[0] = kMessageRequest;
}
inline void PullRequest::clear_message_request() {
  if (_internal_has_message_request()) {
    if (GetArena() == nullptr) {
      delete request_type_.message_request_;
    }
    clear_has_request_type();
  }
}
inline ::MessageRequest* PullRequest::release_message_request() {
  // @@protoc_insertion_point(field_release:PullRequest.message_request)
  if (_internal_has_message_request()) {
    clear_has_request_type();
      ::MessageRequest* temp = request_type_.message_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_type_.message_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::MessageRequest& PullRequest::_internal_message_request() const {
  return _internal_has_message_request()
      ? *request_type_.message_request_
      : reinterpret_cast< ::MessageRequest&>(::_MessageRequest_default_instance_);
}
inline const ::MessageRequest& PullRequest::message_request() const {
  // @@protoc_insertion_point(field_get:PullRequest.message_request)
  return _internal_message_request();
}
inline ::MessageRequest* PullRequest::unsafe_arena_release_message_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PullRequest.message_request)
  if (_internal_has_message_request()) {
    clear_has_request_type();
    ::MessageRequest* temp = request_type_.message_request_;
    request_type_.message_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PullRequest::unsafe_arena_set_allocated_message_request(::MessageRequest* message_request) {
  clear_request_type();
  if (message_request) {
    set_has_message_request();
    request_type_.message_request_ = message_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PullRequest.message_request)
}
inline ::MessageRequest* PullRequest::_internal_mutable_message_request() {
  if (!_internal_has_message_request()) {
    clear_request_type();
    set_has_message_request();
    request_type_.message_request_ = CreateMaybeMessage< ::MessageRequest >(GetArena());
  }
  return request_type_.message_request_;
}
inline ::MessageRequest* PullRequest::mutable_message_request() {
  // @@protoc_insertion_point(field_mutable:PullRequest.message_request)
  return _internal_mutable_message_request();
}

inline bool PullRequest::has_request_type() const {
  return request_type_case() != REQUEST_TYPE_NOT_SET;
}
inline void PullRequest::clear_has_request_type() {
  _oneof_case_[0] = REQUEST_TYPE_NOT_SET;
}
inline PullRequest::RequestTypeCase PullRequest::request_type_case() const {
  return PullRequest::RequestTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SimpleRespond

// bool success = 1;
inline void SimpleRespond::clear_success() {
  success_ = false;
}
inline bool SimpleRespond::_internal_success() const {
  return success_;
}
inline bool SimpleRespond::success() const {
  // @@protoc_insertion_point(field_get:SimpleRespond.success)
  return _internal_success();
}
inline void SimpleRespond::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void SimpleRespond::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:SimpleRespond.success)
}

// string msg = 2;
inline void SimpleRespond::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& SimpleRespond::msg() const {
  // @@protoc_insertion_point(field_get:SimpleRespond.msg)
  return _internal_msg();
}
inline void SimpleRespond::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:SimpleRespond.msg)
}
inline std::string* SimpleRespond::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:SimpleRespond.msg)
  return _internal_mutable_msg();
}
inline const std::string& SimpleRespond::_internal_msg() const {
  return msg_.Get();
}
inline void SimpleRespond::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SimpleRespond::set_msg(std::string&& value) {
  
  msg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SimpleRespond.msg)
}
inline void SimpleRespond::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SimpleRespond.msg)
}
inline void SimpleRespond::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SimpleRespond.msg)
}
inline std::string* SimpleRespond::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SimpleRespond::release_msg() {
  // @@protoc_insertion_point(field_release:SimpleRespond.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SimpleRespond::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SimpleRespond.msg)
}

// -------------------------------------------------------------------

// UserInfoRespond

// string account = 1;
inline void UserInfoRespond::clear_account() {
  account_.ClearToEmpty();
}
inline const std::string& UserInfoRespond::account() const {
  // @@protoc_insertion_point(field_get:UserInfoRespond.account)
  return _internal_account();
}
inline void UserInfoRespond::set_account(const std::string& value) {
  _internal_set_account(value);
  // @@protoc_insertion_point(field_set:UserInfoRespond.account)
}
inline std::string* UserInfoRespond::mutable_account() {
  // @@protoc_insertion_point(field_mutable:UserInfoRespond.account)
  return _internal_mutable_account();
}
inline const std::string& UserInfoRespond::_internal_account() const {
  return account_.Get();
}
inline void UserInfoRespond::_internal_set_account(const std::string& value) {
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UserInfoRespond::set_account(std::string&& value) {
  
  account_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UserInfoRespond.account)
}
inline void UserInfoRespond::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:UserInfoRespond.account)
}
inline void UserInfoRespond::set_account(const char* value,
    size_t size) {
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UserInfoRespond.account)
}
inline std::string* UserInfoRespond::_internal_mutable_account() {
  
  return account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UserInfoRespond::release_account() {
  // @@protoc_insertion_point(field_release:UserInfoRespond.account)
  return account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserInfoRespond::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UserInfoRespond.account)
}

// string username = 2;
inline void UserInfoRespond::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& UserInfoRespond::username() const {
  // @@protoc_insertion_point(field_get:UserInfoRespond.username)
  return _internal_username();
}
inline void UserInfoRespond::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:UserInfoRespond.username)
}
inline std::string* UserInfoRespond::mutable_username() {
  // @@protoc_insertion_point(field_mutable:UserInfoRespond.username)
  return _internal_mutable_username();
}
inline const std::string& UserInfoRespond::_internal_username() const {
  return username_.Get();
}
inline void UserInfoRespond::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UserInfoRespond::set_username(std::string&& value) {
  
  username_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UserInfoRespond.username)
}
inline void UserInfoRespond::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:UserInfoRespond.username)
}
inline void UserInfoRespond::set_username(const char* value,
    size_t size) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UserInfoRespond.username)
}
inline std::string* UserInfoRespond::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UserInfoRespond::release_username() {
  // @@protoc_insertion_point(field_release:UserInfoRespond.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserInfoRespond::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UserInfoRespond.username)
}

// string email = 3;
inline void UserInfoRespond::clear_email() {
  email_.ClearToEmpty();
}
inline const std::string& UserInfoRespond::email() const {
  // @@protoc_insertion_point(field_get:UserInfoRespond.email)
  return _internal_email();
}
inline void UserInfoRespond::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:UserInfoRespond.email)
}
inline std::string* UserInfoRespond::mutable_email() {
  // @@protoc_insertion_point(field_mutable:UserInfoRespond.email)
  return _internal_mutable_email();
}
inline const std::string& UserInfoRespond::_internal_email() const {
  return email_.Get();
}
inline void UserInfoRespond::_internal_set_email(const std::string& value) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UserInfoRespond::set_email(std::string&& value) {
  
  email_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UserInfoRespond.email)
}
inline void UserInfoRespond::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:UserInfoRespond.email)
}
inline void UserInfoRespond::set_email(const char* value,
    size_t size) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UserInfoRespond.email)
}
inline std::string* UserInfoRespond::_internal_mutable_email() {
  
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UserInfoRespond::release_email() {
  // @@protoc_insertion_point(field_release:UserInfoRespond.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserInfoRespond::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UserInfoRespond.email)
}

// string createtime = 4;
inline void UserInfoRespond::clear_createtime() {
  createtime_.ClearToEmpty();
}
inline const std::string& UserInfoRespond::createtime() const {
  // @@protoc_insertion_point(field_get:UserInfoRespond.createtime)
  return _internal_createtime();
}
inline void UserInfoRespond::set_createtime(const std::string& value) {
  _internal_set_createtime(value);
  // @@protoc_insertion_point(field_set:UserInfoRespond.createtime)
}
inline std::string* UserInfoRespond::mutable_createtime() {
  // @@protoc_insertion_point(field_mutable:UserInfoRespond.createtime)
  return _internal_mutable_createtime();
}
inline const std::string& UserInfoRespond::_internal_createtime() const {
  return createtime_.Get();
}
inline void UserInfoRespond::_internal_set_createtime(const std::string& value) {
  
  createtime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UserInfoRespond::set_createtime(std::string&& value) {
  
  createtime_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UserInfoRespond.createtime)
}
inline void UserInfoRespond::set_createtime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  createtime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:UserInfoRespond.createtime)
}
inline void UserInfoRespond::set_createtime(const char* value,
    size_t size) {
  
  createtime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UserInfoRespond.createtime)
}
inline std::string* UserInfoRespond::_internal_mutable_createtime() {
  
  return createtime_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UserInfoRespond::release_createtime() {
  // @@protoc_insertion_point(field_release:UserInfoRespond.createtime)
  return createtime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserInfoRespond::set_allocated_createtime(std::string* createtime) {
  if (createtime != nullptr) {
    
  } else {
    
  }
  createtime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), createtime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UserInfoRespond.createtime)
}

// bool sex = 5;
inline void UserInfoRespond::clear_sex() {
  sex_ = false;
}
inline bool UserInfoRespond::_internal_sex() const {
  return sex_;
}
inline bool UserInfoRespond::sex() const {
  // @@protoc_insertion_point(field_get:UserInfoRespond.sex)
  return _internal_sex();
}
inline void UserInfoRespond::_internal_set_sex(bool value) {
  
  sex_ = value;
}
inline void UserInfoRespond::set_sex(bool value) {
  _internal_set_sex(value);
  // @@protoc_insertion_point(field_set:UserInfoRespond.sex)
}

// -------------------------------------------------------------------

// SearchRespond

// repeated .UserInfoRespond info = 1;
inline int SearchRespond::_internal_info_size() const {
  return info_.size();
}
inline int SearchRespond::info_size() const {
  return _internal_info_size();
}
inline void SearchRespond::clear_info() {
  info_.Clear();
}
inline ::UserInfoRespond* SearchRespond::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:SearchRespond.info)
  return info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UserInfoRespond >*
SearchRespond::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:SearchRespond.info)
  return &info_;
}
inline const ::UserInfoRespond& SearchRespond::_internal_info(int index) const {
  return info_.Get(index);
}
inline const ::UserInfoRespond& SearchRespond::info(int index) const {
  // @@protoc_insertion_point(field_get:SearchRespond.info)
  return _internal_info(index);
}
inline ::UserInfoRespond* SearchRespond::_internal_add_info() {
  return info_.Add();
}
inline ::UserInfoRespond* SearchRespond::add_info() {
  // @@protoc_insertion_point(field_add:SearchRespond.info)
  return _internal_add_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UserInfoRespond >&
SearchRespond::info() const {
  // @@protoc_insertion_point(field_list:SearchRespond.info)
  return info_;
}

// -------------------------------------------------------------------

// ImageRespond

// bytes data = 1;
inline void ImageRespond::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& ImageRespond::data() const {
  // @@protoc_insertion_point(field_get:ImageRespond.data)
  return _internal_data();
}
inline void ImageRespond::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:ImageRespond.data)
}
inline std::string* ImageRespond::mutable_data() {
  // @@protoc_insertion_point(field_mutable:ImageRespond.data)
  return _internal_mutable_data();
}
inline const std::string& ImageRespond::_internal_data() const {
  return data_.Get();
}
inline void ImageRespond::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ImageRespond::set_data(std::string&& value) {
  
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ImageRespond.data)
}
inline void ImageRespond::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ImageRespond.data)
}
inline void ImageRespond::set_data(const void* value,
    size_t size) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ImageRespond.data)
}
inline std::string* ImageRespond::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ImageRespond::release_data() {
  // @@protoc_insertion_point(field_release:ImageRespond.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImageRespond::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ImageRespond.data)
}

// -------------------------------------------------------------------

// FriendRespond

// repeated .UserInfoRespond infos = 1;
inline int FriendRespond::_internal_infos_size() const {
  return infos_.size();
}
inline int FriendRespond::infos_size() const {
  return _internal_infos_size();
}
inline void FriendRespond::clear_infos() {
  infos_.Clear();
}
inline ::UserInfoRespond* FriendRespond::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:FriendRespond.infos)
  return infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UserInfoRespond >*
FriendRespond::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:FriendRespond.infos)
  return &infos_;
}
inline const ::UserInfoRespond& FriendRespond::_internal_infos(int index) const {
  return infos_.Get(index);
}
inline const ::UserInfoRespond& FriendRespond::infos(int index) const {
  // @@protoc_insertion_point(field_get:FriendRespond.infos)
  return _internal_infos(index);
}
inline ::UserInfoRespond* FriendRespond::_internal_add_infos() {
  return infos_.Add();
}
inline ::UserInfoRespond* FriendRespond::add_infos() {
  // @@protoc_insertion_point(field_add:FriendRespond.infos)
  return _internal_add_infos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UserInfoRespond >&
FriendRespond::infos() const {
  // @@protoc_insertion_point(field_list:FriendRespond.infos)
  return infos_;
}

// -------------------------------------------------------------------

// PullRespond

// .SimpleRespond simple_respond = 1;
inline bool PullRespond::_internal_has_simple_respond() const {
  return request_type_case() == kSimpleRespond;
}
inline bool PullRespond::has_simple_respond() const {
  return _internal_has_simple_respond();
}
inline void PullRespond::set_has_simple_respond() {
  _oneof_case_[0] = kSimpleRespond;
}
inline void PullRespond::clear_simple_respond() {
  if (_internal_has_simple_respond()) {
    if (GetArena() == nullptr) {
      delete request_type_.simple_respond_;
    }
    clear_has_request_type();
  }
}
inline ::SimpleRespond* PullRespond::release_simple_respond() {
  // @@protoc_insertion_point(field_release:PullRespond.simple_respond)
  if (_internal_has_simple_respond()) {
    clear_has_request_type();
      ::SimpleRespond* temp = request_type_.simple_respond_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_type_.simple_respond_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::SimpleRespond& PullRespond::_internal_simple_respond() const {
  return _internal_has_simple_respond()
      ? *request_type_.simple_respond_
      : reinterpret_cast< ::SimpleRespond&>(::_SimpleRespond_default_instance_);
}
inline const ::SimpleRespond& PullRespond::simple_respond() const {
  // @@protoc_insertion_point(field_get:PullRespond.simple_respond)
  return _internal_simple_respond();
}
inline ::SimpleRespond* PullRespond::unsafe_arena_release_simple_respond() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PullRespond.simple_respond)
  if (_internal_has_simple_respond()) {
    clear_has_request_type();
    ::SimpleRespond* temp = request_type_.simple_respond_;
    request_type_.simple_respond_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PullRespond::unsafe_arena_set_allocated_simple_respond(::SimpleRespond* simple_respond) {
  clear_request_type();
  if (simple_respond) {
    set_has_simple_respond();
    request_type_.simple_respond_ = simple_respond;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PullRespond.simple_respond)
}
inline ::SimpleRespond* PullRespond::_internal_mutable_simple_respond() {
  if (!_internal_has_simple_respond()) {
    clear_request_type();
    set_has_simple_respond();
    request_type_.simple_respond_ = CreateMaybeMessage< ::SimpleRespond >(GetArena());
  }
  return request_type_.simple_respond_;
}
inline ::SimpleRespond* PullRespond::mutable_simple_respond() {
  // @@protoc_insertion_point(field_mutable:PullRespond.simple_respond)
  return _internal_mutable_simple_respond();
}

// .UserInfoRespond user_info = 2;
inline bool PullRespond::_internal_has_user_info() const {
  return request_type_case() == kUserInfo;
}
inline bool PullRespond::has_user_info() const {
  return _internal_has_user_info();
}
inline void PullRespond::set_has_user_info() {
  _oneof_case_[0] = kUserInfo;
}
inline void PullRespond::clear_user_info() {
  if (_internal_has_user_info()) {
    if (GetArena() == nullptr) {
      delete request_type_.user_info_;
    }
    clear_has_request_type();
  }
}
inline ::UserInfoRespond* PullRespond::release_user_info() {
  // @@protoc_insertion_point(field_release:PullRespond.user_info)
  if (_internal_has_user_info()) {
    clear_has_request_type();
      ::UserInfoRespond* temp = request_type_.user_info_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_type_.user_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::UserInfoRespond& PullRespond::_internal_user_info() const {
  return _internal_has_user_info()
      ? *request_type_.user_info_
      : reinterpret_cast< ::UserInfoRespond&>(::_UserInfoRespond_default_instance_);
}
inline const ::UserInfoRespond& PullRespond::user_info() const {
  // @@protoc_insertion_point(field_get:PullRespond.user_info)
  return _internal_user_info();
}
inline ::UserInfoRespond* PullRespond::unsafe_arena_release_user_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PullRespond.user_info)
  if (_internal_has_user_info()) {
    clear_has_request_type();
    ::UserInfoRespond* temp = request_type_.user_info_;
    request_type_.user_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PullRespond::unsafe_arena_set_allocated_user_info(::UserInfoRespond* user_info) {
  clear_request_type();
  if (user_info) {
    set_has_user_info();
    request_type_.user_info_ = user_info;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PullRespond.user_info)
}
inline ::UserInfoRespond* PullRespond::_internal_mutable_user_info() {
  if (!_internal_has_user_info()) {
    clear_request_type();
    set_has_user_info();
    request_type_.user_info_ = CreateMaybeMessage< ::UserInfoRespond >(GetArena());
  }
  return request_type_.user_info_;
}
inline ::UserInfoRespond* PullRespond::mutable_user_info() {
  // @@protoc_insertion_point(field_mutable:PullRespond.user_info)
  return _internal_mutable_user_info();
}

// .SearchRespond search_respond = 3;
inline bool PullRespond::_internal_has_search_respond() const {
  return request_type_case() == kSearchRespond;
}
inline bool PullRespond::has_search_respond() const {
  return _internal_has_search_respond();
}
inline void PullRespond::set_has_search_respond() {
  _oneof_case_[0] = kSearchRespond;
}
inline void PullRespond::clear_search_respond() {
  if (_internal_has_search_respond()) {
    if (GetArena() == nullptr) {
      delete request_type_.search_respond_;
    }
    clear_has_request_type();
  }
}
inline ::SearchRespond* PullRespond::release_search_respond() {
  // @@protoc_insertion_point(field_release:PullRespond.search_respond)
  if (_internal_has_search_respond()) {
    clear_has_request_type();
      ::SearchRespond* temp = request_type_.search_respond_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_type_.search_respond_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::SearchRespond& PullRespond::_internal_search_respond() const {
  return _internal_has_search_respond()
      ? *request_type_.search_respond_
      : reinterpret_cast< ::SearchRespond&>(::_SearchRespond_default_instance_);
}
inline const ::SearchRespond& PullRespond::search_respond() const {
  // @@protoc_insertion_point(field_get:PullRespond.search_respond)
  return _internal_search_respond();
}
inline ::SearchRespond* PullRespond::unsafe_arena_release_search_respond() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PullRespond.search_respond)
  if (_internal_has_search_respond()) {
    clear_has_request_type();
    ::SearchRespond* temp = request_type_.search_respond_;
    request_type_.search_respond_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PullRespond::unsafe_arena_set_allocated_search_respond(::SearchRespond* search_respond) {
  clear_request_type();
  if (search_respond) {
    set_has_search_respond();
    request_type_.search_respond_ = search_respond;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PullRespond.search_respond)
}
inline ::SearchRespond* PullRespond::_internal_mutable_search_respond() {
  if (!_internal_has_search_respond()) {
    clear_request_type();
    set_has_search_respond();
    request_type_.search_respond_ = CreateMaybeMessage< ::SearchRespond >(GetArena());
  }
  return request_type_.search_respond_;
}
inline ::SearchRespond* PullRespond::mutable_search_respond() {
  // @@protoc_insertion_point(field_mutable:PullRespond.search_respond)
  return _internal_mutable_search_respond();
}

// .ServerPush server_push = 4;
inline bool PullRespond::_internal_has_server_push() const {
  return request_type_case() == kServerPush;
}
inline bool PullRespond::has_server_push() const {
  return _internal_has_server_push();
}
inline void PullRespond::set_has_server_push() {
  _oneof_case_[0] = kServerPush;
}
inline void PullRespond::clear_server_push() {
  if (_internal_has_server_push()) {
    if (GetArena() == nullptr) {
      delete request_type_.server_push_;
    }
    clear_has_request_type();
  }
}
inline ::ServerPush* PullRespond::release_server_push() {
  // @@protoc_insertion_point(field_release:PullRespond.server_push)
  if (_internal_has_server_push()) {
    clear_has_request_type();
      ::ServerPush* temp = request_type_.server_push_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_type_.server_push_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ServerPush& PullRespond::_internal_server_push() const {
  return _internal_has_server_push()
      ? *request_type_.server_push_
      : reinterpret_cast< ::ServerPush&>(::_ServerPush_default_instance_);
}
inline const ::ServerPush& PullRespond::server_push() const {
  // @@protoc_insertion_point(field_get:PullRespond.server_push)
  return _internal_server_push();
}
inline ::ServerPush* PullRespond::unsafe_arena_release_server_push() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PullRespond.server_push)
  if (_internal_has_server_push()) {
    clear_has_request_type();
    ::ServerPush* temp = request_type_.server_push_;
    request_type_.server_push_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PullRespond::unsafe_arena_set_allocated_server_push(::ServerPush* server_push) {
  clear_request_type();
  if (server_push) {
    set_has_server_push();
    request_type_.server_push_ = server_push;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PullRespond.server_push)
}
inline ::ServerPush* PullRespond::_internal_mutable_server_push() {
  if (!_internal_has_server_push()) {
    clear_request_type();
    set_has_server_push();
    request_type_.server_push_ = CreateMaybeMessage< ::ServerPush >(GetArena());
  }
  return request_type_.server_push_;
}
inline ::ServerPush* PullRespond::mutable_server_push() {
  // @@protoc_insertion_point(field_mutable:PullRespond.server_push)
  return _internal_mutable_server_push();
}

// .ImageRespond image_respond = 6;
inline bool PullRespond::_internal_has_image_respond() const {
  return request_type_case() == kImageRespond;
}
inline bool PullRespond::has_image_respond() const {
  return _internal_has_image_respond();
}
inline void PullRespond::set_has_image_respond() {
  _oneof_case_[0] = kImageRespond;
}
inline void PullRespond::clear_image_respond() {
  if (_internal_has_image_respond()) {
    if (GetArena() == nullptr) {
      delete request_type_.image_respond_;
    }
    clear_has_request_type();
  }
}
inline ::ImageRespond* PullRespond::release_image_respond() {
  // @@protoc_insertion_point(field_release:PullRespond.image_respond)
  if (_internal_has_image_respond()) {
    clear_has_request_type();
      ::ImageRespond* temp = request_type_.image_respond_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_type_.image_respond_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ImageRespond& PullRespond::_internal_image_respond() const {
  return _internal_has_image_respond()
      ? *request_type_.image_respond_
      : reinterpret_cast< ::ImageRespond&>(::_ImageRespond_default_instance_);
}
inline const ::ImageRespond& PullRespond::image_respond() const {
  // @@protoc_insertion_point(field_get:PullRespond.image_respond)
  return _internal_image_respond();
}
inline ::ImageRespond* PullRespond::unsafe_arena_release_image_respond() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PullRespond.image_respond)
  if (_internal_has_image_respond()) {
    clear_has_request_type();
    ::ImageRespond* temp = request_type_.image_respond_;
    request_type_.image_respond_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PullRespond::unsafe_arena_set_allocated_image_respond(::ImageRespond* image_respond) {
  clear_request_type();
  if (image_respond) {
    set_has_image_respond();
    request_type_.image_respond_ = image_respond;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PullRespond.image_respond)
}
inline ::ImageRespond* PullRespond::_internal_mutable_image_respond() {
  if (!_internal_has_image_respond()) {
    clear_request_type();
    set_has_image_respond();
    request_type_.image_respond_ = CreateMaybeMessage< ::ImageRespond >(GetArena());
  }
  return request_type_.image_respond_;
}
inline ::ImageRespond* PullRespond::mutable_image_respond() {
  // @@protoc_insertion_point(field_mutable:PullRespond.image_respond)
  return _internal_mutable_image_respond();
}

// .FriendRespond friend_respond = 7;
inline bool PullRespond::_internal_has_friend_respond() const {
  return request_type_case() == kFriendRespond;
}
inline bool PullRespond::has_friend_respond() const {
  return _internal_has_friend_respond();
}
inline void PullRespond::set_has_friend_respond() {
  _oneof_case_[0] = kFriendRespond;
}
inline void PullRespond::clear_friend_respond() {
  if (_internal_has_friend_respond()) {
    if (GetArena() == nullptr) {
      delete request_type_.friend_respond_;
    }
    clear_has_request_type();
  }
}
inline ::FriendRespond* PullRespond::release_friend_respond() {
  // @@protoc_insertion_point(field_release:PullRespond.friend_respond)
  if (_internal_has_friend_respond()) {
    clear_has_request_type();
      ::FriendRespond* temp = request_type_.friend_respond_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_type_.friend_respond_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::FriendRespond& PullRespond::_internal_friend_respond() const {
  return _internal_has_friend_respond()
      ? *request_type_.friend_respond_
      : reinterpret_cast< ::FriendRespond&>(::_FriendRespond_default_instance_);
}
inline const ::FriendRespond& PullRespond::friend_respond() const {
  // @@protoc_insertion_point(field_get:PullRespond.friend_respond)
  return _internal_friend_respond();
}
inline ::FriendRespond* PullRespond::unsafe_arena_release_friend_respond() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PullRespond.friend_respond)
  if (_internal_has_friend_respond()) {
    clear_has_request_type();
    ::FriendRespond* temp = request_type_.friend_respond_;
    request_type_.friend_respond_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PullRespond::unsafe_arena_set_allocated_friend_respond(::FriendRespond* friend_respond) {
  clear_request_type();
  if (friend_respond) {
    set_has_friend_respond();
    request_type_.friend_respond_ = friend_respond;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PullRespond.friend_respond)
}
inline ::FriendRespond* PullRespond::_internal_mutable_friend_respond() {
  if (!_internal_has_friend_respond()) {
    clear_request_type();
    set_has_friend_respond();
    request_type_.friend_respond_ = CreateMaybeMessage< ::FriendRespond >(GetArena());
  }
  return request_type_.friend_respond_;
}
inline ::FriendRespond* PullRespond::mutable_friend_respond() {
  // @@protoc_insertion_point(field_mutable:PullRespond.friend_respond)
  return _internal_mutable_friend_respond();
}

inline bool PullRespond::has_request_type() const {
  return request_type_case() != REQUEST_TYPE_NOT_SET;
}
inline void PullRespond::clear_has_request_type() {
  _oneof_case_[0] = REQUEST_TYPE_NOT_SET;
}
inline PullRespond::RequestTypeCase PullRespond::request_type_case() const {
  return PullRespond::RequestTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ServerPush

// .AddRequest add_request = 1;
inline bool ServerPush::_internal_has_add_request() const {
  return request_type_case() == kAddRequest;
}
inline bool ServerPush::has_add_request() const {
  return _internal_has_add_request();
}
inline void ServerPush::set_has_add_request() {
  _oneof_case_[0] = kAddRequest;
}
inline void ServerPush::clear_add_request() {
  if (_internal_has_add_request()) {
    if (GetArena() == nullptr) {
      delete request_type_.add_request_;
    }
    clear_has_request_type();
  }
}
inline ::AddRequest* ServerPush::release_add_request() {
  // @@protoc_insertion_point(field_release:ServerPush.add_request)
  if (_internal_has_add_request()) {
    clear_has_request_type();
      ::AddRequest* temp = request_type_.add_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_type_.add_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::AddRequest& ServerPush::_internal_add_request() const {
  return _internal_has_add_request()
      ? *request_type_.add_request_
      : reinterpret_cast< ::AddRequest&>(::_AddRequest_default_instance_);
}
inline const ::AddRequest& ServerPush::add_request() const {
  // @@protoc_insertion_point(field_get:ServerPush.add_request)
  return _internal_add_request();
}
inline ::AddRequest* ServerPush::unsafe_arena_release_add_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ServerPush.add_request)
  if (_internal_has_add_request()) {
    clear_has_request_type();
    ::AddRequest* temp = request_type_.add_request_;
    request_type_.add_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerPush::unsafe_arena_set_allocated_add_request(::AddRequest* add_request) {
  clear_request_type();
  if (add_request) {
    set_has_add_request();
    request_type_.add_request_ = add_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ServerPush.add_request)
}
inline ::AddRequest* ServerPush::_internal_mutable_add_request() {
  if (!_internal_has_add_request()) {
    clear_request_type();
    set_has_add_request();
    request_type_.add_request_ = CreateMaybeMessage< ::AddRequest >(GetArena());
  }
  return request_type_.add_request_;
}
inline ::AddRequest* ServerPush::mutable_add_request() {
  // @@protoc_insertion_point(field_mutable:ServerPush.add_request)
  return _internal_mutable_add_request();
}

// .VerifyRequest verify_request = 2;
inline bool ServerPush::_internal_has_verify_request() const {
  return request_type_case() == kVerifyRequest;
}
inline bool ServerPush::has_verify_request() const {
  return _internal_has_verify_request();
}
inline void ServerPush::set_has_verify_request() {
  _oneof_case_[0] = kVerifyRequest;
}
inline void ServerPush::clear_verify_request() {
  if (_internal_has_verify_request()) {
    if (GetArena() == nullptr) {
      delete request_type_.verify_request_;
    }
    clear_has_request_type();
  }
}
inline ::VerifyRequest* ServerPush::release_verify_request() {
  // @@protoc_insertion_point(field_release:ServerPush.verify_request)
  if (_internal_has_verify_request()) {
    clear_has_request_type();
      ::VerifyRequest* temp = request_type_.verify_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_type_.verify_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::VerifyRequest& ServerPush::_internal_verify_request() const {
  return _internal_has_verify_request()
      ? *request_type_.verify_request_
      : reinterpret_cast< ::VerifyRequest&>(::_VerifyRequest_default_instance_);
}
inline const ::VerifyRequest& ServerPush::verify_request() const {
  // @@protoc_insertion_point(field_get:ServerPush.verify_request)
  return _internal_verify_request();
}
inline ::VerifyRequest* ServerPush::unsafe_arena_release_verify_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ServerPush.verify_request)
  if (_internal_has_verify_request()) {
    clear_has_request_type();
    ::VerifyRequest* temp = request_type_.verify_request_;
    request_type_.verify_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerPush::unsafe_arena_set_allocated_verify_request(::VerifyRequest* verify_request) {
  clear_request_type();
  if (verify_request) {
    set_has_verify_request();
    request_type_.verify_request_ = verify_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ServerPush.verify_request)
}
inline ::VerifyRequest* ServerPush::_internal_mutable_verify_request() {
  if (!_internal_has_verify_request()) {
    clear_request_type();
    set_has_verify_request();
    request_type_.verify_request_ = CreateMaybeMessage< ::VerifyRequest >(GetArena());
  }
  return request_type_.verify_request_;
}
inline ::VerifyRequest* ServerPush::mutable_verify_request() {
  // @@protoc_insertion_point(field_mutable:ServerPush.verify_request)
  return _internal_mutable_verify_request();
}

// .MessageRequest message_request = 3;
inline bool ServerPush::_internal_has_message_request() const {
  return request_type_case() == kMessageRequest;
}
inline bool ServerPush::has_message_request() const {
  return _internal_has_message_request();
}
inline void ServerPush::set_has_message_request() {
  _oneof_case_[0] = kMessageRequest;
}
inline void ServerPush::clear_message_request() {
  if (_internal_has_message_request()) {
    if (GetArena() == nullptr) {
      delete request_type_.message_request_;
    }
    clear_has_request_type();
  }
}
inline ::MessageRequest* ServerPush::release_message_request() {
  // @@protoc_insertion_point(field_release:ServerPush.message_request)
  if (_internal_has_message_request()) {
    clear_has_request_type();
      ::MessageRequest* temp = request_type_.message_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_type_.message_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::MessageRequest& ServerPush::_internal_message_request() const {
  return _internal_has_message_request()
      ? *request_type_.message_request_
      : reinterpret_cast< ::MessageRequest&>(::_MessageRequest_default_instance_);
}
inline const ::MessageRequest& ServerPush::message_request() const {
  // @@protoc_insertion_point(field_get:ServerPush.message_request)
  return _internal_message_request();
}
inline ::MessageRequest* ServerPush::unsafe_arena_release_message_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ServerPush.message_request)
  if (_internal_has_message_request()) {
    clear_has_request_type();
    ::MessageRequest* temp = request_type_.message_request_;
    request_type_.message_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerPush::unsafe_arena_set_allocated_message_request(::MessageRequest* message_request) {
  clear_request_type();
  if (message_request) {
    set_has_message_request();
    request_type_.message_request_ = message_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ServerPush.message_request)
}
inline ::MessageRequest* ServerPush::_internal_mutable_message_request() {
  if (!_internal_has_message_request()) {
    clear_request_type();
    set_has_message_request();
    request_type_.message_request_ = CreateMaybeMessage< ::MessageRequest >(GetArena());
  }
  return request_type_.message_request_;
}
inline ::MessageRequest* ServerPush::mutable_message_request() {
  // @@protoc_insertion_point(field_mutable:ServerPush.message_request)
  return _internal_mutable_message_request();
}

// .DeleteFriendRequest delete_request = 4;
inline bool ServerPush::_internal_has_delete_request() const {
  return request_type_case() == kDeleteRequest;
}
inline bool ServerPush::has_delete_request() const {
  return _internal_has_delete_request();
}
inline void ServerPush::set_has_delete_request() {
  _oneof_case_[0] = kDeleteRequest;
}
inline void ServerPush::clear_delete_request() {
  if (_internal_has_delete_request()) {
    if (GetArena() == nullptr) {
      delete request_type_.delete_request_;
    }
    clear_has_request_type();
  }
}
inline ::DeleteFriendRequest* ServerPush::release_delete_request() {
  // @@protoc_insertion_point(field_release:ServerPush.delete_request)
  if (_internal_has_delete_request()) {
    clear_has_request_type();
      ::DeleteFriendRequest* temp = request_type_.delete_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_type_.delete_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DeleteFriendRequest& ServerPush::_internal_delete_request() const {
  return _internal_has_delete_request()
      ? *request_type_.delete_request_
      : reinterpret_cast< ::DeleteFriendRequest&>(::_DeleteFriendRequest_default_instance_);
}
inline const ::DeleteFriendRequest& ServerPush::delete_request() const {
  // @@protoc_insertion_point(field_get:ServerPush.delete_request)
  return _internal_delete_request();
}
inline ::DeleteFriendRequest* ServerPush::unsafe_arena_release_delete_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ServerPush.delete_request)
  if (_internal_has_delete_request()) {
    clear_has_request_type();
    ::DeleteFriendRequest* temp = request_type_.delete_request_;
    request_type_.delete_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerPush::unsafe_arena_set_allocated_delete_request(::DeleteFriendRequest* delete_request) {
  clear_request_type();
  if (delete_request) {
    set_has_delete_request();
    request_type_.delete_request_ = delete_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ServerPush.delete_request)
}
inline ::DeleteFriendRequest* ServerPush::_internal_mutable_delete_request() {
  if (!_internal_has_delete_request()) {
    clear_request_type();
    set_has_delete_request();
    request_type_.delete_request_ = CreateMaybeMessage< ::DeleteFriendRequest >(GetArena());
  }
  return request_type_.delete_request_;
}
inline ::DeleteFriendRequest* ServerPush::mutable_delete_request() {
  // @@protoc_insertion_point(field_mutable:ServerPush.delete_request)
  return _internal_mutable_delete_request();
}

inline bool ServerPush::has_request_type() const {
  return request_type_case() != REQUEST_TYPE_NOT_SET;
}
inline void ServerPush::clear_has_request_type() {
  _oneof_case_[0] = REQUEST_TYPE_NOT_SET;
}
inline ServerPush::RequestTypeCase ServerPush::request_type_case() const {
  return ServerPush::RequestTypeCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::SearchRequest_SearchType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SearchRequest_SearchType>() {
  return ::SearchRequest_SearchType_descriptor();
}
template <> struct is_proto_enum< ::SearchRequest_SearchMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SearchRequest_SearchMode>() {
  return ::SearchRequest_SearchMode_descriptor();
}
template <> struct is_proto_enum< ::VerifyRequest_VerifyType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::VerifyRequest_VerifyType>() {
  return ::VerifyRequest_VerifyType_descriptor();
}
template <> struct is_proto_enum< ::MessageRequest_msgType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MessageRequest_msgType>() {
  return ::MessageRequest_msgType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_IM_5flogin_2eproto
